<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Real-Time-Rendering-4 学习笔记</title>
    <link href="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/img.png" class="" width="1212"><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>最近研究Cesium框架，每每涉及到图形学底层相关的内容，就倍感吃力，所以想系统地把图形学的基础好好的夯实一下。<br>于是选择了<strong>Real-Time-Rendering-4</strong>作为学习图形学的入门书籍，目前是打算一个月左右先完整的过一遍，图形学博大精深，可不是一年两年就能学会的，目前也只是了解一些皮毛，对顶点&#x2F;片源着色器，还有glsl有一些初步的了解。</p><h2 id="图形渲染管线-The-Graphics-Rendering-Pipeline"><a href="#图形渲染管线-The-Graphics-Rendering-Pipeline" class="headerlink" title="图形渲染管线 (The Graphics Rendering Pipeline)"></a>图形渲染管线 (The Graphics Rendering Pipeline)</h2><blockquote><p>Anonymous —— “A chain is no stronger than its weakest link.”</p><p>佚名 —— “链条的坚固程度取决于它最薄弱的环节。”</p></blockquote><p>渲染管线的核⼼功能就是利⽤给定的虚拟相机、三维物体、光源等信息，来⽣成或者渲染（render）⼀张⼆维图像。</p><p>类比流水线，但是整个流⽔线的效率会被执⾏速度最慢的那个阶段所影响</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%98%B6%E6%AE%B5.png" class="" width="1212"><h3 id="渲染管线的架构"><a href="#渲染管线的架构" class="headerlink" title="渲染管线的架构"></a>渲染管线的架构</h3><ol><li>应用阶段 （application）<br>运行在CPU，并行，⼀般CPU 会负责碰撞检测，全局加速算法，动画，物理模拟等任务</li><li>几何处理阶段（geometry processing）<br>运行在GPU，负责处理变换（transform），投影（projection）以及其他所有和⼏何处理相关的任务。这个阶段需要计算哪些物体会被绘制，应该如何进⾏绘制，以及应当在哪⾥绘制等问题。</li><li>光栅化阶段（rasterization）<br>运行在GPU，将构成⼀个三⻆形的三个顶点作为输⼊，找到所有位于三⻆形内部的像素，并将其转发到下⼀个阶段中。</li><li>像素处理阶段（pixel processing）<br>运行在GPU，决定每个像素的颜色，执行深度测试，判断像素是否可见</li></ol><h3 id="应用阶段-（application）"><a href="#应用阶段-（application）" class="headerlink" title="应用阶段 （application）"></a>应用阶段 （application）</h3><p>开发者可控制，修改程序，提高程序性能表现，如通过算法减少后续需要渲染的三角形数量。也可以通过计算着色器（compute shader）的独⽴模式，让GPU作为通用处理器来进行辅助计算。最后，要将需要渲染的集合物体输入到几何处理阶段。</p><p>碰撞检测，检测到碰撞后，产生相应的的响应，并返回给碰撞物体</p><p>处理其他来源的输入，如鼠标，键盘，头戴显示器等</p><h3 id="几何处理阶段（geometry-processing）"><a href="#几何处理阶段（geometry-processing）" class="headerlink" title="几何处理阶段（geometry processing）"></a>几何处理阶段（geometry processing）</h3><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86%E9%98%B6%E6%AE%B5.png" class="" width="1212"><h4 id="顶点着色"><a href="#顶点着色" class="headerlink" title="顶点着色"></a>顶点着色</h4><p>两个任务，1.计算顶点位置 2.计算开发人员想要输出的参数，如法线，纹理坐标<br>顶点位置计算过程</p><ol><li>模型坐标，即初始坐标，无任何变换，可以方便的调整自身位置和朝向等，目前的坐标系为<strong>模型坐标系</strong></li><li>模型坐标经过模型变换，得到了世界坐标，世界空间是唯一的，各个模型经过各自的模型变换后，所有的模型就位于同一个空间中，目前的坐标系为<strong>世界坐标系</strong></li><li>为了方便之后的投影操作和裁剪操作，世界坐标需要经过视图变换，得到视图坐标，其目的是为了将相机放在原点，并调整相机的朝向看向-Z，同时y轴指向上，x指向右，如此变换，形成相机空间（camera space），也可以叫做观察空间（view space），或者是眼睛空间（eye space），目前的坐标系为<strong>视图坐标系</strong>，也有人叫<strong>相机坐标系</strong>，<strong>眼睛坐标系</strong><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%9B%B8%E6%9C%BA%E5%8F%98%E6%8D%A2.png" class="" width="1212"></li><li>通过投影矩阵将眼睛&#x2F;视图&#x2F;相机坐标，投影到裁剪空间（clipping space）中，有两种投影方法，正交投影，透视投影（近大远小），目前的坐标系为<strong>裁剪坐标系（clip coordinates）</strong>。坐标的z分量并不会被存储在⽣成的图像中，而是存储在⼀个叫做 z-buffer 的地方，通过这种⽅式，模型便从三维空间投影到了⼆维空间中。</li></ol><h4 id="顶点处理"><a href="#顶点处理" class="headerlink" title="顶点处理"></a>顶点处理</h4><p>完成顶点处理后，还有几个可以在GPU上执行的可选操作，顺序如下  曲⾯细分（tessellation）、⼏何着⾊（geometry shading）和流式输出（stream out）。是否使⽤这些可选操作，⼀⽅⾯取决于硬件的功能（并不是所有 GPU 都⽀持这些功能），另⼀⽅⾯取决于程序员的意愿。这些功能相互独⽴，⽽且⼀般并不是很常⽤</p><ol><li>曲面细分<br>场景中的相机位置可以⽤来决定需要⽣成多少个三⻆形：当距离相机很近时，则⽣成较多数量的三⻆形；当距离相机很远时，则⽣成较少数量的三⻆形。</li><li>⼏何着⾊器（geometry shader）<br>⼏何着⾊器有好⼏种⽤途，其中最流⾏的⼀种就是⽤来⽣成粒⼦。想象我们正在模拟⼀个烟花爆炸的过程，每颗⽕花都可以表示为⼀个点，即⼀个简单的顶点。⼏何着⾊器可以将每个顶点都转换成⼀个正⽅形（由两个三⻆形组成），这个正⽅形会始终⾯朝观察者，并且会占据若⼲个像素，这为我们提供了⼀个更加令⼈信服的图元来进⾏后续的着⾊。</li><li>流式输出（stream out）<br>这个阶段可以让我们把 GPU 作为⼀个<strong>⼏何引擎</strong>，我们可以选择将这些处理好的数据输⼊到⼀个<strong>缓冲区</strong>中，⽽不是将其直接输⼊到渲染管线的后续部分并直接输出到屏幕上，这些缓冲区中的数据可以被CPU 读回使⽤，也可以被 GPU 本身的后续步骤使⽤。</li></ol><h4 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h4><p>在可视范围内的图元，才需要被发送到下一个阶段，光栅化，可视范围外的则不会被发送，对于一部分位于可是空间内部，一部分在外部的图元，需要进行<strong>裁剪</strong>操作，由于我们使用投影矩阵将可视空间变换为标准立方，所有图元都需要被标准立方体裁剪</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%A3%81%E5%89%AA.png" class="" width="1212"><h4 id="屏幕映射"><a href="#屏幕映射" class="headerlink" title="屏幕映射"></a>屏幕映射</h4><h3 id="光栅化阶段（rasterization）"><a href="#光栅化阶段（rasterization）" class="headerlink" title="光栅化阶段（rasterization）"></a>光栅化阶段（rasterization）</h3><p>光栅化也被称为扫描变换（scan conversion），这是⼀个将屏幕空间中<strong>⼆维顶点，转换到屏幕上像素</strong>的过程<br>可以使⽤点采样（point sample）来判定某个点是否位于三⻆形内部。最简单的⽅式就是直接将每个像素的中⼼点来作为该像素的样本，如果该像素的中⼼点位于三⻆形内部的话，那么我们就认为该像素也位于三⻆形的内部。我们还可以通过超采样（supersampling）或者多重采样抗锯⻮技术（multisampling antialiasing），来对每个像素进⾏多次采样<br>通过对三角形三个顶点的属性插值，获取每个三角形片元的属性</p><h3 id="像素处理阶段（pixel-processing）"><a href="#像素处理阶段（pixel-processing）" class="headerlink" title="像素处理阶段（pixel processing）"></a>像素处理阶段（pixel processing）</h3><h4 id="像素着色"><a href="#像素着色" class="headerlink" title="像素着色"></a>像素着色</h4><p>使用插值过的着⾊数据作为输入，来进⾏逐像素的着色计算，输出每个片元的颜色值，其中最重要的是纹理化</p><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>将片元的颜色组合起来，这个阶段被称为ROP，光栅操作管线（raster operations pipeline）<br>该阶段还负责解决可见性问题，通过z-buffer（深度缓冲）实现，z-buffer存储每个像素的z值， 但不适用于透明物体的渲染</p><p>模板缓冲（stencil buffer）是⼀个离屏缓冲区（offscreen buffer），用来记录被渲染图元的位置信息</p><p>系统中的所有缓冲区在一起，被统称为帧缓冲（frame buffer）<br>屏幕上显示的内容就是颜色缓冲中的内容</p><h2 id="图形处理单元-（The-Graphics-Processing-Unit）-GPU"><a href="#图形处理单元-（The-Graphics-Processing-Unit）-GPU" class="headerlink" title="图形处理单元 （The Graphics Processing Unit）-GPU"></a>图形处理单元 （The Graphics Processing Unit）-GPU</h2><p>GPU 专注于⼀组⾼度并⾏化的任务，从⽽获得了很⾼的处理速度，它使⽤专⻔的硬件来实现 z-buffer，来能够快速访问纹理图像和其他缓冲区，还可以快速寻找哪些像素被⼀个三⻆形所覆盖</p><h3 id="数据并行结构"><a href="#数据并行结构" class="headerlink" title="数据并行结构"></a>数据并行结构</h3><p>遇到需要等待的指令，如读取纹理，gpu会切换到别的线程（warp），从而提高效率</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%9D%80%E8%89%B2%E5%99%A8%E6%89%A7%E8%A1%8C%E4%BE%8B%E5%AD%90.png" class="" width="1212"><p>影响执⾏效率的另⼀个重要特征是着⾊器程序的结构，其中最重要的⼀个因素就是每个线程所使⽤的寄存器数量。我们现在假设 GPU 上可以同时存在两千个线程，每个线程中运⾏的着⾊器程序所需要使⽤的寄存器数量越多，那么 GPU 上能够同时存在的线程数量和 warp 数量也就越少。数量较少的 warp 意味着，可能⽆法通过 warp交换来缓解处理器核⼼的停滞，</p><p>另⼀个影响整体运⾏效率的因素是由“if”语句和循环语句导致的动态分⽀（dynamic branching）</p><h3 id="GPU-管线概述"><a href="#GPU-管线概述" class="headerlink" title="GPU 管线概述"></a>GPU 管线概述</h3><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/gpu%E7%A1%AC%E4%BB%B6%E9%98%B6%E6%AE%B5.png" class="" width="1212"><p>顶点着⾊器（vertex shader）是⼀个完全可编程的阶段，它⽤于实现渲染管线中的⼏何处理阶段。⼏何着⾊器（geometry shader）也是⼀个完全可编程的阶段，它可以对图元（点、线或者三⻆形）的顶点进⾏操作，它也可以⽤于进⾏⼀些逐图元的着⾊操作、销毁图元或者是创建新图元等。曲⾯细分（tessllation）阶段和⼏何着⾊器都是可选的阶段</p><p>裁剪、三⻆形设置和三⻆形遍历阶段，都由固定功能的硬件进⾏实现。屏幕映射受到窗⼝（window）和视⼝（viewport）设置的影响，其内部包含了⼀个简单的缩放和重定位功能。像素着⾊器阶段是⼀个完全可编程的阶段。合并阶段尽管不是可编程的，但是它是⾼度可配置的，我们可以为其设定各种各样的操作。合并阶段实现了渲染管线中的合并功能，负责修改维护颜⾊缓冲、z-buffer、混合、模板缓冲以及其他任何与输出相关的缓冲区。</p><h3 id="可编程着色及其-API-的演变"><a href="#可编程着色及其-API-的演变" class="headerlink" title="可编程着色及其 API 的演变"></a>可编程着色及其 API 的演变</h3><p>⼀次 draw call 会调⽤图形 API 来绘制⼀组图元，渲染管线也会相应执⾏它所对应的着⾊器。每个可编程的着⾊器阶段都包含两种类型的输⼊：统⼀输⼊（uniforminput），它是指在⼀次 draw call 中不会发⽣改变的常量；可变输⼊（varyinginput），来⾃三⻆形的顶点或者光栅化的数据</p><p><strong>发展历史</strong></p><ul><li>NVIDIA 的Geforce256 是第⼀个被称作 GPU 的图形硬件，但是它仅仅只是可配置的，⽽不是可编程的。</li><li>2001 年初，NVIDIA 推出了 Geforce3 显卡，这是第⼀个⽀持可编程顶点着⾊器的GPU，它通过 DirectX 8.0 来暴露相关接⼝，并可以扩展到 OpenGL。</li><li>2002 年微软推出了包含 Shader Model 2.0 的 DirectX 9.0，它⽀持真正可编程的顶点着⾊器和像素着⾊器</li><li>⼤约在同⼀时间，OpenGL ARB（Architecture Review Board，架构审查委员会）也推出了 GLSL</li><li>Shader Model 3.0 于 2004 年推出，并增加了动态流程控制，这使得着⾊器更加强⼤。它还将可选的功能特性纳⼊了需求列表，进⼀步扩⼤了可使⽤资源的范围，在顶点着⾊器中添加了对纹理读取的有限⽀持</li><li>2006 年底，DirectX 10.0 推出了 ShaderModel 4.0，它引⼊了⼏个重要特性，例如⼏何着⾊器和流式输出。</li><li>在 2009 年发布的 DirectX 11 和 Shader Model 5.0 中，增加了曲⾯细分着⾊器和计算着⾊器</li><li>图形 API 的下⼀个重⼤变化是由 AMD 于 2013 年提出的 Mantle API AMD 将⾃身 Mantle 的⼯作贡献给了 Khronos 组织，后者于 2016 年推出了新⼀代的 API，叫做 Vulkan。与 OpenGL ⼀样，Vulkan 可以⽤于多个操作系统。</li><li>在移动设备上⼀般会使⽤ OpenGL ES，其中“ES”代表的是嵌⼊式系统（embedded system）</li><li>OpenGL ES 的⼀个分⽀是基于浏览器的 WebGL，它通过 JavaScripts 进⾏调⽤。它的第⼀个版本于 2011 年发布</li></ul><h3 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h3><p>顶点着⾊器提供了⼀种⽤于修改、创建或者忽略三⻆形顶点数据的⽅法，这些数据可以是颜⾊、法线、纹理坐标和位置等。通常顶点着⾊器程序会将顶点从模型空间变换到⻬次裁剪空间中，在最极端的情况下，顶点着⾊器也必须要输出顶点的位置。<br>其他作用</p><ul><li>物体⽣成：仅创建⼀次模型，并通过顶点着⾊器对其进⾏变形。</li><li>使⽤蒙⽪技术和变形技术来设置⻆⾊的身体动画和⾯部动画。</li><li>程序化变形：例如旗帜、布料和⽔⾯的运动。</li><li>粒⼦创建：通过向流⽔线发送简并（⽆⾯积）⽹格，并根据需要来设定它们的位置，从⽽来模拟粒⼦效果。</li><li>透镜畸变、热雾、⽔波纹、书⻚卷曲以及其他特效，可以通过将整个帧缓冲的内容作为⼀个纹理，然后将其应⽤在⼀个正在经历变形，并且屏幕对⻬的⽹格上进⾏实现。</li><li>通过使⽤顶点纹理来获取并应⽤地形的⾼度场</li></ul><h3 id="曲面细分阶段"><a href="#曲面细分阶段" class="headerlink" title="曲面细分阶段"></a>曲面细分阶段</h3><p>曲⾯细分阶段允许我们绘制曲⾯，GPU 的任务就是将每个曲⾯描述都转换成⼀组三⻆形。<br>使⽤曲⾯细分阶段有⼏个<strong>好处</strong>。描述⼀个曲⾯往往要⽐提供三⻆形⽹格本身更加紧凑，除了节省内存之外，当场景中存在⼀些不断变化的⻆⾊或者物体时，这个功能还可以防⽌ CPU 与 GPU 之间的总线带宽成为程序的性能瓶颈。对于⼀个给定的相机视⻆，曲⾯细分可以⽣成<strong>适当的</strong>三⻆形数量，这样的曲⾯可以被⾼效渲染。</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9B%B2%E9%9D%A2%E7%BB%86%E5%88%86.png" class="" width="1212"><h3 id="几何着色器"><a href="#几何着色器" class="headerlink" title="几何着色器"></a>几何着色器</h3><p>⼏何着⾊器可以将⼀种图元转换为另⼀种图元</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%87%A0%E4%BD%95%E7%9D%80%E8%89%B2%E5%99%A8%E4%BD%9C%E7%94%A8.png" class="" width="1212"><h3 id="像素着色器"><a href="#像素着色器" class="headerlink" title="像素着色器"></a>像素着色器</h3><p>在 OpenGL 中像素着⾊器被称为⽚元着⾊器（fragment shader）<br>多重渲染⽬标（multiple render target，MRT）<br>像素着⾊器并不会直接将⽣成的结果输出到颜⾊缓冲和 z-buffer 中，⽽是会为每个⽚元⽣成多组数值，并存储到不同的缓冲区中，每个缓冲区被称为⼀个渲染⽬标（render target，RT）<br>我们可以在⼀个 pass 中进⾏如下操作：在第⼀个渲染⽬标中⽣成颜⾊图像，在第⼆个渲染⽬标中⽣成对象标识符，并在第三个渲染⽬标中⽣成世界空间距离。MRT 的这种能⼒催⽣了⼀种不同类型的渲染管线，它被称作延迟着⾊（deferred shading），在延迟着⾊中，可⻅性计算和着⾊计算是在两个单独的 pass 中完成的</p><h3 id="合并阶段"><a href="#合并阶段" class="headerlink" title="合并阶段"></a>合并阶段</h3><p>在合并阶段中，我们会将每个独⽴⽚元的颜⾊和深度进⾏组合，并最终形成帧缓冲。DirectX 将这个阶段叫做输出合并（output merger）；OpenGL 将其称为逐样本操作（per-sample operation）。<br>⽚元的深度值（以及其他任何可以使⽤的内容，例如模板缓冲或者裁剪测试，即 scissor）可以⽤于对可⻅性进⾏测试，不可⻅的⽚元将会被直接剔除，这个功能被称作为 early-z 使⽤ early-z 可以⼤⼤提升渲染管线的性能表现，详⻅章节 18.4.5</p><h3 id="计算着⾊器"><a href="#计算着⾊器" class="headerlink" title="计算着⾊器"></a>计算着⾊器</h3><p>GPU 不仅可以⽤来实现传统的图形渲染管线，还可以⽤于很多⾮图形的领域，例如⽤于计算股票期权的估计价值，以及⽤于训练深度学习的神经⽹络等，这种使⽤硬件的⽅式叫做 GPU 计算（GPU computing）。<br>计算着⾊器的其中⼀个优势在于，它可以访问在 GPU 上⽣成的数据。由于在 GPU和 CPU 之间进⾏通讯是⼀件效率很低的事情，因此如果我们能够将数据驻留在 GPU上，并在 GPU 上进⾏计算，那么就可以⼤幅提⾼性能表现</p><h2 id="Transform-变换"><a href="#Transform-变换" class="headerlink" title="Transform 变换"></a>Transform 变换</h2><p>变换（transform）是指以点、向量、颜⾊等实体作为输⼊，并以某种⽅式对其进⾏转换的⼀种操作。</p><h3 id="基本变换"><a href="#基本变换" class="headerlink" title="基本变换"></a>基本变换</h3><h4 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h4><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B9%B3%E7%A7%BB%E7%9F%A9%E9%98%B5.png" class="" width="1212"><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5.png" class="" width="1212"><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BC%A9%E6%94%BE.png" class="" width="1212"><p>如果向量 中包含 1 个或者 3 个为负的分量，那么我们就获得了⼀个反射矩阵（reflection matrix）<br>⼀个顶点为逆时针顺序定义的三⻆形，在经过反射矩阵变换之后，其顶点顺序将会变成顺时针；顶点顺序的改变会导致错误的光照效果和背⾯剔除。我们可以通过计算左上⻆ ⾏列式的值，来判断⼀个给定的缩放矩阵是否为⼀个反射矩阵。如果缩放矩阵的⾏列式为负数，则说明该矩阵是⼀个反射矩阵</p><h4 id="剪切矩阵"><a href="#剪切矩阵" class="headerlink" title="剪切矩阵"></a>剪切矩阵</h4><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%AA%E5%88%87%E7%9F%A9%E9%98%B5.png" class="" width="1212"><p>下标中的 （其索引为 0）代表了第 0 ⾏，下标中的 （其索引为 2）代表了第 2 列，因此我们可以知道参数 位于剪切矩阵的第 0 ⾏，第 2 列</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%AA%E5%88%87%E7%9F%A9%E9%98%B5%E6%95%88%E6%9E%9C.png" class="" width="1212"><p>行列式不变,提及保持</p><h4 id="刚体变换"><a href="#刚体变换" class="headerlink" title="刚体变换"></a>刚体变换</h4><p>在这个过程中，仅仅是物体的位置和朝向发⽣了变化，其形状和⼤⼩并没有受到任何影响。我们将这样只包含平移和旋转的变换叫做<strong>刚体变换</strong>（rigid-body transform），它具有保持⻓度、⻆度和⼿性的特点。<br>任何刚体变换矩阵 ，都可以写成⼀个平移矩阵 和⼀个旋转矩阵 的连接</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%9A%E4%BD%93%E5%8F%98%E6%8D%A2.png" class="" width="1212"><h4 id="法线变换"><a href="#法线变换" class="headerlink" title="法线变换"></a>法线变换</h4><p>对法线正确的变换⽅法是：使⽤原始变换矩阵的伴随矩阵（adjoint）的转置矩阵来对其进⾏变换，⽽不是使⽤原始变换矩阵本身<br>矩阵的伴随矩阵是始终存在的。法线在经过变换之后，其⻓度可能会发⽣变化，因此在变换后通常还需要对法线进⾏归⼀化处理<br>法线变换的传统⽅法是，计算原始变换矩阵的逆矩阵的转置<br>如果变换矩阵完全由平移、旋转和均匀缩放（没有被拉伸或者压缩）操作组合⽽成的,可以直接使⽤模型的变换矩阵来对法线进⾏变换<br>还有⼀点需要注意⼀下，如果表⾯法线是从变换之后的三⻆形中计算出来的话（例如使⽤三⻆形的边向量进⾏叉乘，从⽽获得垂直于三⻆形表⾯的法线），那么法线变换的问题就不需要进⾏考虑了。切向量的本质和法线并不相同，它可以直接使⽤原始变换矩阵进⾏变换。</p><h4 id="求逆矩阵"><a href="#求逆矩阵" class="headerlink" title="求逆矩阵"></a>求逆矩阵</h4><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B1%82%E9%80%86%E7%9F%A9%E9%98%B5.png" class="" width="1212"><h3 id="特殊变换"><a href="#特殊变换" class="headerlink" title="特殊变换"></a>特殊变换</h3><h4 id="欧拉变换"><a href="#欧拉变换" class="headerlink" title="欧拉变换"></a>欧拉变换</h4><p>欧拉变换可以构建⼀个旋转矩阵，将我们⾃身（相机）或者其他物体指向⼀个特定的⽅向</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%AC%A7%E6%8B%89%E5%8F%98%E6%8D%A2.png" class="" width="1212"><p>欧拉变换是三个旋转矩阵相乘的结果,所以其本身也是一个<strong>正交矩阵</strong>,<br>的欧拉⻆参数 代表了每个⽅向（head 头部，pitch 俯仰⻆，roll 滚转⻆）上绕轴旋转的⻆度<br>欧拉⻆在⼩⻆度变换和调整观察者⽅向⽅⾯⼗分有⽤，但是它也有⼀些严重的限制，即我们很难将两组欧拉⻆组合在⼀起,这也是使⽤其他⽅向表示⽅法（例如<strong>四元数</strong>）的原因之⼀<br>使⽤欧拉⻆也会导致⼀个叫做万向节死锁（gimbal lock）的问题</p><h4 id="从欧拉变换中提取参数"><a href="#从欧拉变换中提取参数" class="headerlink" title="从欧拉变换中提取参数"></a>从欧拉变换中提取参数</h4><p>在某些情况下，我们需要从⼀个代表欧拉变换的矩阵中，提取出各个⽅向上所改变的参数 h,p,r，即欧拉变换的参数</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BB%8E%E6%AC%A7%E6%8B%89%E5%8F%98%E6%8D%A2%E4%B8%AD%E6%8F%90%E5%8F%96%E5%8F%82%E6%95%B0.png" class="" width="1212"><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%BB%8E%E6%AC%A7%E6%8B%89%E5%8F%98%E6%8D%A2%E4%B8%AD%E6%8F%90%E5%8F%96%E5%8F%82%E6%95%B01.png" class="" width="1212"><p>但是，这⾥我们还需要处理⼀种特殊情况，即当 cos p &#x3D; 0 的时候，我们会遇到被称为<strong>万向节死锁</strong>的问题, 此时旋转⻆度 r,h 将会围绕着同⼀个旋转轴进⾏旋转<br>通过计算 r &#x3D; atan2(-e10,e00), 还有一点 由于arcsin的定义域是 -π&#x2F;2 &lt;&#x3D; p &lt;&#x3D; π&#x2F;2，如果我们的p在这个范围外来创建变换矩阵E的话,我们将无法通过E计算出最初的p值,对于同一个E,hpr的组合并不是唯一的</p><h4 id="矩阵分解"><a href="#矩阵分解" class="headerlink" title="矩阵分解"></a>矩阵分解</h4><p>刚刚我们就从正交矩阵中,提取出了欧拉角<br>从⼀个变换矩阵中提取出平移矩阵是很简单的，我们只需要找到 矩阵中的<strong>最后⼀列元素</strong>即可。我们还可以对变换矩阵的⾏列式进⾏检查，如果<strong>⾏列式的值是⼀个负数</strong>，那么就说明这个矩阵包含⼀个<strong>反射变换</strong>。⽽想要分离出旋转、缩放和剪切变换则需要更多的的努⼒。</p><h4 id="绕任意轴旋转"><a href="#绕任意轴旋转" class="headerlink" title="绕任意轴旋转"></a>绕任意轴旋转</h4><h3 id="四元数"><a href="#四元数" class="headerlink" title="四元数"></a>四元数</h3><p>四元数可以⽤于表示旋转和⽅向，它在很多地⽅都⽐欧拉⻆和矩阵表示更加优秀。任何三维⽅向都可以表示为⼀个绕特定轴的简单旋转，给定⼀个旋转轴和旋转⻆度，我们可以直接将其转换为⼀个四元数，或者是从⼀个四元数中提取出旋转轴和旋转⻆度；但是对任意⽅向上的欧拉⻆进⾏转换是很困难的。四元数可以⽤于稳定且恒定速度的⽅向插值，这是欧拉⻆很难实现的。<br>复数由⼀个实部和⼀个虚部组成，每个复数都可以使⽤两个实数进⾏表示，其中第⼆个实数要乘以 √-1。<br>类似地，四元数由四个部分组成，前三个值与旋转的轴有关，⽽旋转⻆度会对四个值都产⽣影响</p><h4 id="四元数的数学背景"><a href="#四元数的数学背景" class="headerlink" title="四元数的数学背景"></a>四元数的数学背景</h4><p>目前理解不了…pass<br><a href="https://eater.net/quaternions">https://eater.net/quaternions</a>  可视化四元数网站</p><h4 id="四元数变换"><a href="#四元数变换" class="headerlink" title="四元数变换"></a>四元数变换</h4><p>单位四元数（unit quaternion），它们的模⻓为 1。单位四元数可以⽤于表示任何的三维旋转，⽽且这种表示⽅式⾮常紧凑和简单。</p><h5 id="球面线性插值"><a href="#球面线性插值" class="headerlink" title="球面线性插值"></a>球面线性插值</h5><h3 id="顶点混合"><a href="#顶点混合" class="headerlink" title="顶点混合"></a>顶点混合</h3><p>顶点混合（vertex blending）是⼀种解决类似两段机械手臂,解决关节灵活柔韧的问题的常见方法. 它还有⼏个其他的名称，例如：线性蒙⽪混合（linear-blend skinning）、包络（enveloping）或者⻣架⼦空间变形（skeleton-subspace deformation）</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%A1%B6%E7%82%B9%E6%B7%B7%E5%90%88.png" class="" width="1212"><p>最基础的顶点混合算法，它当然会存在⼀些缺点，例如我们不希望出现的折叠、扭曲或者是⾃相交等现象<br>更好的⽅案是使⽤双四元数混合（dual quaternion）,这个技术可以让蒙⽪保持原始形状的刚性，从⽽避免四肢出现像“糖纸”⼀样的扭曲</p><h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><p>在动画中，从⼀个三维模型变形到另⼀个三维模型是⾮常有⽤的</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%A1%B6%E7%82%B9%E5%8F%98%E5%BD%A2.png" class="" width="1212"><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8F%98%E5%BD%A2%E6%9D%83%E9%87%8D%E6%8E%A7%E5%88%B6%E8%A1%A8%E6%83%85.png" class="" width="1212"><h3 id="几何缓存回放"><a href="#几何缓存回放" class="headerlink" title="几何缓存回放"></a>几何缓存回放</h3><p>在⼀些过场动画中，我们可能会希望使⽤⼀些极⾼质量的动画，这些⾼质量动画使⽤上述我们所提到的任何⽅法和技术都⽆法实时实现。⼀种简单的⽅法是，将所有帧的顶点数据<strong>预先计算并存储</strong>起来， 然后在游戏运⾏的时候，从磁盘上读取这些数据并对顶点进⾏更新。但是对于⼀个包含 30000 个顶点的模型⽽⾔，⼀段简单的动画可能就会占据 50 MB&#x2F;s 的带宽。Gneiting 提供了若⼲种⽅法，可以将内存消耗降低到原来的 10%</p><h3 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h3><p>在真正渲染⼀个场景之前，场景中所有的相关物体都需要被投影到某个平⾯上，或者是某个简单空间中。在投影变换完成之后，才会进⾏裁剪操作和渲染操作</p><h4 id="正交投影"><a href="#正交投影" class="headerlink" title="正交投影"></a>正交投影</h4><p>当使⽤正交投影来观察⼀个场景的时候，⽆论场景中的物体距离相机多远，它们的⼤⼩都不会发⽣改变</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%AD%A3%E4%BA%A4%E6%8A%95%E5%BD%B1%E7%9F%A9%E9%98%B5.png" class="" width="1212"><p>由于行列式为0, 所以不可逆,即我们将⼀个物体从三维空间变换到⼆维平⾯上，是没有办法将丢失的维度信息恢复的</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%AD%A3%E4%BA%A4%E6%8A%95%E5%BD%B1%E6%BC%94%E7%A4%BA.png" class="" width="1212"><p>通常我们会使⽤⼀个六元组（l,r,b,t,n,f ）来描述⼀个正交投影矩阵，它们分别代表了左侧、右侧、底部、顶部、近裁剪平⾯以及远裁剪平⾯。这个矩阵会将代表可视空间的轴对⻬包围盒（axis-aligned bounding box)，简称 AABB</p><h4 id="透视投影"><a href="#透视投影" class="headerlink" title="透视投影"></a>透视投影</h4><p>透视投影更加符合我们⼈眼观察这个世界的模式，因为它具有近⼤远⼩的特点<br>与正交投影类似，透视投影并没有真正地将所有物体都投影到了⼀个平⾯上（这个过程是不可逆的），⽽是将视锥体变换成了⼀个规则观察体</p><p>视场⻆（field of view，FOV）是提供场景感的重要因素，与电脑屏幕相⽐，眼睛本身就有⼀个物理上的视场⻆（⼈类单眼的⽔平视场⻆最⼤可达 156 度，双眼的⽔平视场⻆最⼤可达 188 度；⼈类两眼的重合视场⻆为 124 度，单眼的舒适视场⻆为 60度；当集中注意⼒时，视场⻆约为 25 度。）<br>如果使⽤⽐⼈眼物理视场⻆更⼩的视场⻆，会减弱透视的感觉，因为观察者在场景中的视野会被放⼤；如果使⽤⼀个更⼤的视场⻆的话，会使得场景中的物体看起来很扭曲（例如使⽤相机的⼴⻆镜头），尤其是在靠近屏幕边缘的地⽅，会夸⼤近距离物体的⽐例。然⽽，视场⻆越⼤，意味着视野越⼴阔，可以让观察者感觉看到的物体更⼤，更加令⼈印象深刻；其优势在于可以为⽤户提供更多的环境信息。</p><h2 id="着色基础-Shading-Basics"><a href="#着色基础-Shading-Basics" class="headerlink" title="着色基础 Shading Basics"></a>着色基础 Shading Basics</h2><h3 id="着色模型"><a href="#着色模型" class="headerlink" title="着色模型"></a>着色模型</h3><p>模型⽤于描述物体的颜⾊是如何随着表⾯朝向、观察⽅向和光照等因素的变化⽽变化的。</p><p>Gooch 着⾊模型的基本思想是⽐较表⾯法线和光源的位置：如果法线直接指向了光源，那么就会使⽤⼀种暖⾊调来给表⾯着⾊；如果法线没有指向光源，则会使⽤⼀种冷⾊调来给表⾯着⾊；如果法线位于这两个状态之间，则会在冷暖⾊调之间进⾏插值</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%9D%80%E8%89%B2%E6%A8%A1%E5%9E%8B%E5%8D%95%E4%BD%8D%E5%90%91%E9%87%8F.png" class="" width="1212"><p>常见线性插值操作,t*Ca + (1 - t)Cb  t属于 0到1, t在0-1变化时, 最终结果会在Ca和Cb中插值,获得颜色, 一般着色器都会提供内置插值函数,如lerp或者mix</p><h3 id="光源"><a href="#光源" class="headerlink" title="光源"></a>光源</h3><p>现实世界中的光照是⾮常复杂的，可能会有很多个光源，每个光源的⼤⼩、形状、颜⾊以及强度都可能会不相同；⽽间接光照的情况就更加复杂了<br>⼀个光源可以通过两个关键参数来与着⾊模型进⾏相互作⽤：指向光源的光线⽅向 L ，以及光线的颜⾊ light</p><h4 id="方向光"><a href="#方向光" class="headerlink" title="方向光"></a>方向光</h4><p>是光源模型中最简单的⼀个， 光线方向和颜色是固定的，，当场景到光源的距离相对于场景尺⼨⽽⾔很⼤的时候，⽅向光的效果会很好。</p><h4 id="精确光源（点光源）"><a href="#精确光源（点光源）" class="headerlink" title="精确光源（点光源）"></a>精确光源（点光源）</h4><p>光照强度随着距离衰减， 即 光照颜色 &#x3D; 初始颜色 * （参考距离&#x2F;光照距离）^2 但有两个问题，如果距离过小，光照强度就会趋于无限大，通常会给分母加一个较小的数, 还有一个问题就是很远的地方,我们期望光照的范围为20米,超过这个距离后则不会应用光照,并且边缘处不能尖锐截断,通常会使用窗函数来解决</p><h5 id="聚光灯"><a href="#聚光灯" class="headerlink" title="聚光灯"></a>聚光灯</h5><p>与点光源不同的是，现实世界中⼏乎所有光源的光照，不仅会随着距离的改变⽽发⽣变化，同样也会随着⽅向的改变⽽发⽣变化</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%85%89%E6%BA%90.png" class="" width="1212"><h3 id="实现着色模型"><a href="#实现着色模型" class="headerlink" title="实现着色模型"></a>实现着色模型</h3><p>为了在实际中进⾏应⽤，这些着⾊⽅程和光照⽅程必须要在代码中进⾏实现,有以下几点需要在编写代码时考虑</p><h4 id="计算频率"><a href="#计算频率" class="headerlink" title="计算频率"></a>计算频率</h4><p>当设计⼀个着⾊实现的时候，我们需要评估它的计算频率（frequency of evaluation）<br>如果计算的结果是一个常数,固定的值,那么可以在cpu中提前计算完成<br>另⼀种情况是，⼀个着⾊计算的结果会在应⽤程序运⾏的过程中发⽣变化，但是其变化的频率很慢，因此并不需要每⼀帧都进⾏更新</p><p>需要注意的是，即使顶点着⾊器总是会输出单位⻓度的的表⾯法线，但是光栅化插值也可能会改变它们的⻓度,对于表面法线,通常会在顶点着色器和像素着色器中都进行归一化</p><p>与表⾯法线不同，指向特定位置的向量（例如观察向量和光线向量），通常并不会进⾏插值</p><h4 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h4><p>glsl中,输入输出的变量用in 和 out标记  像素着⾊器的输⼊与顶点着⾊器的输出是相匹配的</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> vPos;<br><span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> vNormal;<br><span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> outColor;<br></code></pre></td></tr></table></figure><p>统一值,定义点光源</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs GLSL">struct Light &#123;<br>   <span class="hljs-type">vec4</span> position;<br>   <span class="hljs-type">vec4</span> color;<br>&#125;<br><br><span class="hljs-keyword">uniform</span> LightUBlock &#123;<br>   Light uLights [ <span class="hljs-number">2</span> ];<br>&#125;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">uint</span> uLightCount;<br></code></pre></td></tr></table></figure><p>像素着色器</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">vec3</span> lit (<span class="hljs-type">vec3</span> l, <span class="hljs-type">vec3</span> n, <span class="hljs-type">vec3</span> v)&#123;<br>   <span class="hljs-type">vec3</span> r_l = <span class="hljs-built_in">reflect</span>(-l, n);<br>   <span class="hljs-type">float</span> s = <span class="hljs-built_in">clamp</span>(<span class="hljs-number">100.</span> * <span class="hljs-built_in">dot</span>(r_l,v) - <span class="hljs-number">97.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>);<br>   vec highlightColor = <span class="hljs-type">vec3</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">mix</span> (uWarmColor, highlightColor, s)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="材质系统"><a href="#材质系统" class="headerlink" title="材质系统"></a>材质系统</h4><p>最常⻅的情况就是参数化材质，在最简单形式中，材质参数化需要两种材质实体：材质模板（material template）和材质实例（material instance）</p><h3 id="锯齿-走样-和抗锯齿-反走样"><a href="#锯齿-走样-和抗锯齿-反走样" class="headerlink" title="锯齿(走样)和抗锯齿(反走样)"></a>锯齿(走样)和抗锯齿(反走样)</h3><p>⼀旦⽹格单元的中⼼被三⻆形所覆盖，这个单元的像素颜⾊就会⽴即从⽩⾊变为⿊⾊。三⻆形会以像素的形式显示出来，⼀个⽹格像素要么被覆盖，要么不被覆盖，绘制出来的线也有类似的问题. 由于这个原因，因此三⻆形和线段的边界会呈现出锯⻮状</p><h4 id="采样和滤波理论"><a href="#采样和滤波理论" class="headerlink" title="采样和滤波理论"></a>采样和滤波理论</h4><p>渲染图像的过程本质上是⼀个采样任务。这是因为图像的⽣成实际上就是对三维场景进⾏采样的过程，从⽽获得图像（离散像素数组）中每个像素的颜⾊值<br>当⼀个信号的采样率过低时，就会出现⾛样现象（在光栅化游戏中，屏幕的分辨率⼤体决定了采样率，因此屏幕分辨率越⾼，⾛样和锯⻮现象就越少）。</p><img src="/2024/04/30/real-time-rendering-4%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%87%87%E6%A0%B7%E9%A2%91%E7%8E%87%E5%AF%B9%E9%87%87%E6%A0%B7%E7%BB%93%E6%9E%9C%E7%9A%84%E5%BD%B1%E5%93%8D.png" class="" width="1212">]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>图形学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cesium生成视锥体实现视频投射</title>
    <link href="/2024/04/10/cesium%E7%94%9F%E6%88%90%E8%A7%86%E9%94%A5%E4%BD%93%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E6%8A%95%E5%B0%84/"/>
    <url>/2024/04/10/cesium%E7%94%9F%E6%88%90%E8%A7%86%E9%94%A5%E4%BD%93%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E6%8A%95%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><img src="/2024/04/10/cesium%E7%94%9F%E6%88%90%E8%A7%86%E9%94%A5%E4%BD%93%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E6%8A%95%E5%B0%84/img.png" class="" width="1212"><h3 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">addPerspectiveFrustum</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">                                          position,</span><br><span class="hljs-params">                                          fov = <span class="hljs-number">90</span>,</span><br><span class="hljs-params">                                          near = <span class="hljs-number">1</span>,</span><br><span class="hljs-params">                                          far = <span class="hljs-number">100</span>,</span><br><span class="hljs-params">                                          aspectRatio = <span class="hljs-number">600</span> / <span class="hljs-number">1080</span>,</span><br><span class="hljs-params">                                          heading = <span class="hljs-number">60</span>,</span><br><span class="hljs-params">                                          pitch = -<span class="hljs-number">70</span>,</span><br><span class="hljs-params">                                          roll = <span class="hljs-number">0</span>,</span><br><span class="hljs-params">                                          videoUrl</span><br><span class="hljs-params"></span><br><span class="hljs-params"></span><br><span class="hljs-params">                                      &#125;</span>) &#123;<br>    <span class="hljs-title function_">removePrimitiveById</span>(<span class="hljs-string">&#x27;frustum&#x27;</span>)<br>    <span class="hljs-keyword">const</span> frustum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">PerspectiveFrustum</span>(&#123;<br>        <span class="hljs-attr">fov</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(fov),<br>        aspectRatio,<br>        near,<br>        far,<br>    &#125;);<br><br>    <span class="hljs-keyword">const</span> frustumGeometry = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">FrustumOutlineGeometry</span>(&#123;<br>        <span class="hljs-attr">frustum</span>: frustum,<br>        <span class="hljs-attr">origin</span>: position,<br>        <span class="hljs-attr">orientation</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Quaternion</span>.<span class="hljs-title function_">fromHeadingPitchRoll</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">HeadingPitchRoll</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(heading),<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(pitch),<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(roll)<br>        )),<br>    &#125;);<br>    <span class="hljs-comment">// 取出视锥体的顶点坐标</span><br>    <span class="hljs-keyword">const</span> geometry = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">FrustumOutlineGeometry</span>.<span class="hljs-title function_">createGeometry</span>(frustumGeometry)<br>    <span class="hljs-keyword">const</span> result = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; geometry.<span class="hljs-property">attributes</span>.<span class="hljs-property">position</span>.<span class="hljs-property">values</span>.<span class="hljs-property">length</span>; i+=<span class="hljs-number">3</span>) &#123;<br>        result.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(geometry.<span class="hljs-property">attributes</span>.<span class="hljs-property">position</span>.<span class="hljs-property">values</span>).<span class="hljs-title function_">slice</span>(i,i+<span class="hljs-number">3</span>))<br>    &#125;<br>    <span class="hljs-title function_">removaEntitiesAndPrimitivesByName</span>(<span class="hljs-string">&#x27;frustumPoint&#x27;</span>)<br>    <span class="hljs-keyword">const</span> videoPolygon = []<br>    result.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">e,i</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-comment">//取后四个坐标, 即远面的坐标</span><br>            <span class="hljs-keyword">const</span> position1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(...e)<br>            <span class="hljs-comment">// 生成射线和globe相交,计算交点</span><br>            <span class="hljs-keyword">const</span> ray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Ray</span>(position,<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">subtract</span>(position1,position,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>()))<br>            <span class="hljs-keyword">const</span> pickPosition = <span class="hljs-variable language_">window</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-title function_">pick</span>(ray,<span class="hljs-variable language_">window</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>)<br>            <span class="hljs-keyword">if</span> (pickPosition)&#123;<br>                videoPolygon.<span class="hljs-title function_">push</span>(pickPosition)<br>                <span class="hljs-variable language_">window</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>                    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;frustumPoint&#x27;</span>,<br>                    <span class="hljs-attr">position</span>:pickPosition,<br>                    <span class="hljs-attr">point</span>:&#123;<br>                        <span class="hljs-attr">pixelSize</span>: <span class="hljs-number">10</span>,<br>                        <span class="hljs-attr">color</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-title function_">fromCssColorString</span>(<span class="hljs-string">&#x27;rgb(255,255,255)&#x27;</span>),<br>                        <span class="hljs-attr">outlineColor</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-title function_">fromCssColorString</span>(<span class="hljs-string">&#x27;rgb(255,255,255)&#x27;</span>),<br>                        <span class="hljs-attr">outlineWidth</span>: <span class="hljs-number">2</span>,<br>                    &#125;,<br>                    <span class="hljs-attr">polyline</span>:&#123;<br>                        <span class="hljs-attr">positions</span>:[position,pickPosition],<br>                        <span class="hljs-attr">width</span>:<span class="hljs-number">2</span>,<br>                        <span class="hljs-attr">material</span>:<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-title function_">fromCssColorString</span>(<span class="hljs-string">&#x27;rgb(255,255,255)&#x27;</span>)<br>                    &#125;<br>                &#125;)<br>            &#125;<br><br>        &#125;<br>    &#125;)<br>    <span class="hljs-title function_">removaEntitiesAndPrimitivesByName</span>(<span class="hljs-string">&#x27;videoFrustumPolygon&#x27;</span>)<br>    <span class="hljs-comment">// 获得视锥体和地面的交点,构成平面,并使用video标签做为材质</span><br>    <span class="hljs-keyword">if</span> (videoPolygon.<span class="hljs-property">length</span> === <span class="hljs-number">4</span>)&#123;<br>        <span class="hljs-keyword">const</span> videoEle = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;video&#x27;</span>)<br>        videoEle.<span class="hljs-property">muted</span> = <span class="hljs-literal">true</span><br>        videoEle.<span class="hljs-property">autoplay</span> = <span class="hljs-literal">true</span><br>        videoEle.<span class="hljs-property">src</span> = videoUrl || <span class="hljs-string">&#x27;/busVisulizer/video/chejianVideo.mp4&#x27;</span><br>        videoEle.<span class="hljs-property">loop</span> = <span class="hljs-literal">true</span><br>        videoEle.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;videoFrustumPolygon&quot;</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">append</span>(videoEle)<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;videoFrustumPolygon&#x27;</span>,<br>            <span class="hljs-attr">polygon</span>:&#123;<br>                <span class="hljs-attr">hierarchy</span>:videoPolygon,<br>                <span class="hljs-attr">material</span>:<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;videoFrustumPolygon&quot;</span>),<br>            &#125;<br>        &#125;)<br>        <span class="hljs-comment">// 需要同步时钟,否则视频不会动</span><br>        <span class="hljs-keyword">let</span> synchronizer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">VideoSynchronizer</span>(&#123;<br>            clock : <span class="hljs-variable language_">window</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">clock</span>,<br>            element : videoEle<br>        &#125;);<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">clock</span>.<span class="hljs-property">shouldAnimate</span> = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> frustumGeometryInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">GeometryInstance</span>(&#123;<br>        <span class="hljs-attr">geometry</span>: frustumGeometry,<br>        <span class="hljs-attr">attributes</span>: &#123;<br>            <span class="hljs-attr">color</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">ColorGeometryInstanceAttribute</span>.<span class="hljs-title function_">fromColor</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-title function_">fromCssColorString</span>(<span class="hljs-string">&#x27;rgb(255,255,255)&#x27;</span>)),<br>        &#125;,<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;frustum&quot;</span>,<br>    &#125;);<br><br><br>    <span class="hljs-keyword">const</span> primitive = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Primitive</span>(&#123;<br>        <span class="hljs-attr">geometryInstances</span>: frustumGeometryInstance,<br>        <span class="hljs-attr">appearance</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">PerInstanceColorAppearance</span>(&#123;<br>            <span class="hljs-attr">closed</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">flat</span>: <span class="hljs-literal">true</span>,<br>        &#125;),<br>        <span class="hljs-attr">asynchronous</span>:<span class="hljs-literal">false</span><br>    &#125;)<br>    primitive.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;frustum&quot;</span><br>    primitive.<span class="hljs-property">position</span> = position<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">primitives</span>.<span class="hljs-title function_">add</span>(primitive);<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx配置pdf访问或是下载</title>
    <link href="/2024/04/10/nginx%E9%85%8D%E7%BD%AEpdf%E8%AE%BF%E9%97%AE%E6%88%96%E6%98%AF%E4%B8%8B%E8%BD%BD/"/>
    <url>/2024/04/10/nginx%E9%85%8D%E7%BD%AEpdf%E8%AE%BF%E9%97%AE%E6%88%96%E6%98%AF%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>最近遇到一个问题,在服务器上配置了静态资源路径,但是访问里面的pdf后,却是直接下载,但是pdf文件,浏览器应该是能够支持直接预览的才对<br>经过搜索最终解决, 修改nginx配置, 如果访问路径中含有pdf,则添加响应头 content-type 为application&#x2F;pdf即可</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">location ^~ /staticFiles/ &#123;<br>    alias /usr/share/nginx/html/staticFiles/;<br>    if ($request_filename ~* ^.*?\.(pdf)$) &#123;<br>        add_header Content-Type application/pdf;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>附上nginx常用变量</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs text">全局变量<br>$args ： 这个变量等于请求行中的参数，同$query_string<br>$content_length ： 请求头中的Content-length字段<br>$content_type ： 请求头中的Content-Type字段<br>$document_root ： 当前请求在root指令中指定的值<br>$host ： 请求主机头字段，否则为服务器名称<br>$http_user_agent ： 客户端agent信息<br>$http_cookie ： 客户端cookie信息<br>$limit_rate ： 这个变量可以限制连接速率<br>$request_method ： 客户端请求的动作，通常为GET或POST<br>$remote_addr ： 客户端的IP地址<br>$remote_port ： 客户端的端口<br>$remote_user ： 已经经过Auth Basic Module验证的用户名<br>$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成<br>$scheme ： HTTP方法（如http，https）<br>$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1<br>$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值<br>$server_name ： 服务器名称<br>$server_port ： 请求到达服务器的端口号<br>$request_uri ： 包含请求参数的原始URI，不包含主机名，如/foo/bar.php?arg=baz<br>$uri ： 不带请求参数的当前URI，$uri不包含主机名，如/foo/bar.html<br>$document_uri ： 与$uri相同<br><br>假设请求为http://www.qq.com:8080/a/b/c.php，则<br>$host：www.qq.com<br>$server_port：8080<br>$request_uri：http://www.qq.com:8080/a/b/c.php<br>$document_uri：/a/b/c.php<br>$document_root：/var/www/html<br>$request_filename：/var/www/html/a/b/c.php<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>pdf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>element背景模糊样式</title>
    <link href="/2024/03/20/element%E8%83%8C%E6%99%AF%E6%A8%A1%E7%B3%8A%E6%A0%B7%E5%BC%8F/"/>
    <url>/2024/03/20/element%E8%83%8C%E6%99%AF%E6%A8%A1%E7%B3%8A%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<img src="/2024/03/20/element%E8%83%8C%E6%99%AF%E6%A8%A1%E7%B3%8A%E6%A0%B7%E5%BC%8F/img.png" class="" width="1212"><p>突然发现element plus的顶部的背景模糊效果，还挺好看的，看了一下F12 是这三个属性实现的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">radial-gradient</span>(transparent <span class="hljs-number">1px</span>, <span class="hljs-number">#ffffff</span> <span class="hljs-number">1px</span>);<br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">4px</span> <span class="hljs-number">4px</span>;<br>    backdrop-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">saturate</span>(<span class="hljs-number">50%</span>) <span class="hljs-built_in">blur</span>(<span class="hljs-number">4px</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>background</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用IndexDB优化大量Billboard的加载</title>
    <link href="/2024/03/11/%E4%BD%BF%E7%94%A8IndexDB%E4%BC%98%E5%8C%96%E5%A4%A7%E9%87%8FBillboard%E7%9A%84%E5%8A%A0%E8%BD%BD/"/>
    <url>/2024/03/11/%E4%BD%BF%E7%94%A8IndexDB%E4%BC%98%E5%8C%96%E5%A4%A7%E9%87%8FBillboard%E7%9A%84%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近客户反应有个图层加载比较慢,大概要等待5秒左右,这个图层就是每个企业的名字,加载的实体数量大概在1500左右. 于是着手优化 </p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>一开始是使用entity中的label来加载的,label的文本是企业的名称,同时注意到控制台有800多个警告</p><img src="/2024/03/11/%E4%BD%BF%E7%94%A8IndexDB%E4%BC%98%E5%8C%96%E5%A4%A7%E9%87%8FBillboard%E7%9A%84%E5%8A%A0%E8%BD%BD/img.png" class="" width="1231"><p>然后我就到cesium的sandcastle里验证一下,我的label的text属性是Math.random(), 发现一点也不卡, 经过搜索发现,<br>这个label的text属性,如果是相似的文本,会有优化,由于每个label在cesium中都会调用canvas的getImageData方法,<br>造成了性能损失</p><p>同时我还尝试了LabelCollection看看是否有提升,结果是还不如entity,第一次加载同样需要等待,而且之后的加载也需<br>要等待一样的时间,entity方式加载,后续加载会比较快</p><p>于是我打算自己通过canvas生成企业的名称,并使用billboard的方式来加载.同时将生成的图片存储下来,这样下次就不用再次生成了, 优化后的加载速度在1s左右</p><p>大体逻辑如下</p><ol><li>去db中获取所有的企业图片键值对数据</li><li>若没有找到,说明该企业未生成过,使用canvas生成图片,并存储到db中</li><li>若找到,直接使用存储的图片</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 数据库连接,使用游标获取localforage库中的keyvaluepairs表中的全部数据</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getAllPic</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> imgObj = &#123;&#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> request = <span class="hljs-variable language_">window</span>.<span class="hljs-property">indexedDB</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;localforage&quot;</span>);<br>      request.<span class="hljs-property">onsuccess</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-keyword">let</span> db = e.<span class="hljs-property">target</span>.<span class="hljs-property">result</span><br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-keyword">const</span> objectStore = db.<span class="hljs-title function_">transaction</span>(<span class="hljs-string">&quot;keyvaluepairs&quot;</span>).<span class="hljs-title function_">objectStore</span>(<span class="hljs-string">&quot;keyvaluepairs&quot;</span>);<br>          objectStore.<span class="hljs-title function_">openCursor</span>().<span class="hljs-property">onsuccess</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> cursor = event.<span class="hljs-property">target</span>.<span class="hljs-property">result</span>;<br>            <span class="hljs-keyword">if</span> (cursor) &#123;<br>              imgObj[cursor.<span class="hljs-property">key</span>] = cursor.<span class="hljs-property">value</span><br>              cursor.<span class="hljs-title function_">continue</span>();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-title function_">resolve</span>(imgObj)<br>              db.<span class="hljs-title function_">close</span>()<br>            &#125;<br>          &#125;;<br>        &#125;<span class="hljs-keyword">catch</span> (e) &#123;<br>          <span class="hljs-title function_">resolve</span>(imgObj)<br>          db.<span class="hljs-title function_">close</span>()<br>        &#125;<br>      &#125;<br>      request.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error&#x27;</span>)<br>      &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (e)&#123;<br>      <span class="hljs-title function_">resolve</span>()<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> imgObj = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getAllPic</span>()<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; data.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> e = data[i];<br>    <span class="hljs-comment">// 求中心点</span><br>    <span class="hljs-keyword">if</span> (!e?.<span class="hljs-property">qymc</span>?.<span class="hljs-property">length</span>)&#123;<br>        <span class="hljs-keyword">continue</span><br>    &#125;<br>    <span class="hljs-comment">// if (i&lt; 10)&#123;</span><br>    <span class="hljs-comment">// 判断是否已经生成过图像</span><br>    <span class="hljs-keyword">let</span> imgsrc<br>    <span class="hljs-keyword">if</span> (imgObj[<span class="hljs-string">&#x27;qymcImg&#x27;</span>+ e.<span class="hljs-property">qymc</span>])&#123;<br>        imgsrc = imgObj[<span class="hljs-string">&#x27;qymcImg&#x27;</span>+ e.<span class="hljs-property">qymc</span>]<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>        <span class="hljs-keyword">const</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>)<br>        <span class="hljs-keyword">const</span> width = e.<span class="hljs-property">qymc</span>.<span class="hljs-property">length</span> * <span class="hljs-number">21.5</span><br>        canvas.<span class="hljs-property">width</span> = width<br>        canvas.<span class="hljs-property">height</span> = <span class="hljs-number">40</span><br>        ctx.<span class="hljs-property">fillStyle</span> = color || colorDic[e.<span class="hljs-property">fxdjmc</span>] || <span class="hljs-string">&#x27;rgb(70,113,246)&#x27;</span><br>        ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, <span class="hljs-number">40</span>)<br>        ctx.<span class="hljs-property">font</span> = <span class="hljs-string">&#x27;800 20px 微软雅黑&#x27;</span><br>        ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#fff&#x27;</span><br>        ctx.<span class="hljs-title function_">fillText</span>(e.<span class="hljs-property">qymc</span>, <span class="hljs-number">10</span>, <span class="hljs-number">25</span>);<br>        imgsrc = canvas.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">&quot;image/png&quot;</span>)<br>        <span class="hljs-comment">// 这里使用了一个库 localforage来简单的添加数据,存储base64</span><br>        localforage.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;qymcImg&#x27;</span>+ e.<span class="hljs-property">qymc</span>, imgsrc)<br>    &#125;<br>    <span class="hljs-keyword">let</span> image = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>    image.<span class="hljs-property">src</span> = imgsrc<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>        name,<br>        <span class="hljs-attr">position</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(+e.<span class="hljs-property">jd</span>,+e.<span class="hljs-property">wd</span>, <span class="hljs-number">25</span>),<br>        <span class="hljs-attr">billboard</span>:&#123;<br>            image,<br>            <span class="hljs-attr">disableDepthTestDistance</span>:<span class="hljs-title class_">Number</span>.<span class="hljs-property">POSITIVE_INFINITY</span>,<br>            <span class="hljs-attr">translucencyByDistance</span>:<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">NearFarScalar</span>(<span class="hljs-number">3000</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3001</span>,<span class="hljs-number">0</span>)<br>        &#125;,<br>        <span class="hljs-attr">qymc</span>: e.<span class="hljs-property">qymc</span>,<br>        <span class="hljs-attr">qyid</span>: e.<span class="hljs-property">id</span><br>    &#125;)<br><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>        name,<br>        <span class="hljs-attr">position</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(+e.<span class="hljs-property">jd</span>,+e.<span class="hljs-property">wd</span>, <span class="hljs-number">25</span>),<br>        <span class="hljs-attr">point</span>:&#123;<br>            <span class="hljs-attr">pixelSize</span>:<span class="hljs-number">8</span>,<br>            <span class="hljs-attr">color</span>:<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-title function_">fromCssColorString</span>(color || colorDic[e.<span class="hljs-property">fxdjmc</span>] || <span class="hljs-string">&#x27;rgb(70,113,246)&#x27;</span>),<br>            <span class="hljs-attr">disableDepthTestDistance</span>:<span class="hljs-title class_">Number</span>.<span class="hljs-property">POSITIVE_INFINITY</span>,<br>            <span class="hljs-attr">heightReference</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">HeightReference</span>.<span class="hljs-property">CLAMP_TO_GROUND</span><br>        &#125;,<br>        <span class="hljs-attr">qymc</span>: e.<span class="hljs-property">qymc</span>,<br>        <span class="hljs-attr">qyid</span>: e.<span class="hljs-property">id</span><br>    &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以在f12中看到存储的数据</p><img src="/2024/03/11/%E4%BD%BF%E7%94%A8IndexDB%E4%BC%98%E5%8C%96%E5%A4%A7%E9%87%8FBillboard%E7%9A%84%E5%8A%A0%E8%BD%BD/img_1.png" class="" width="1231">]]></content>
    
    
    
    <tags>
      
      <tag>Cesium</tag>
      
      <tag>IndexDB</tag>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次vite打包优化</title>
    <link href="/2024/03/07/%E8%AE%B0%E4%B8%80%E6%AC%A1vite%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/"/>
    <url>/2024/03/07/%E8%AE%B0%E4%B8%80%E6%AC%A1vite%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近的项目打包越来越慢,甚至达到了5分多钟,但是项目并不是很大,感到很奇怪<br>于是便开始搜索打包相关的问题</p></blockquote><h2 id="1-分析打包产物"><a href="#1-分析打包产物" class="headerlink" title="1.分析打包产物"></a>1.分析打包产物</h2><blockquote><p>使用 rollup-plugin-visualizer 插件分析打包产物</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i rollup-plugin-visualizer -D<br></code></pre></td></tr></table></figure><blockquote><p>在vite.config.ts中</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; visualizer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rollup-plugin-visualizer&#x27;</span><br><br><span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">visualizer</span>()<br>]<br></code></pre></td></tr></table></figure><blockquote><p>然后开始打包,打包结束会在根目录生成一个stats.html文件,打开后可以<br>看到打包产物</p></blockquote><img src="/2024/03/07/%E8%AE%B0%E4%B8%80%E6%AC%A1vite%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/img_1.png" class="" width="1121"><blockquote><p>然后我发现几个geojson的文件巨大,最大的50多m,看来罪魁祸首就是他了</p></blockquote><h2 id="2-解决超大json问题"><a href="#2-解决超大json问题" class="headerlink" title="2.解决超大json问题"></a>2.解决超大json问题</h2><blockquote><p>对于这些文件,我一开始是直接import到代码中的,这可能导致<br>性能问题,之后我就通过axios请求的方式获取这些数据,并删除<br>import, 经过这样处理,打包速度快了很多,从之前的3-8分钟稳定<br>到40多秒</p></blockquote><h2 id="3-使用gzip进行压缩"><a href="#3-使用gzip进行压缩" class="headerlink" title="3.使用gzip进行压缩"></a>3.使用gzip进行压缩</h2><blockquote><p>最后还通过gzip对产物进一步优化,提升加载速度</p><p>安装并引入</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install vite-plugin-compression -D<br></code></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">visualizer</span>(),<span class="hljs-title function_">viteCompression</span>()]<br></code></pre></td></tr></table></figure><p>参数</p><ol><li>filter：过滤器，对哪些类型的文件进行压缩，默认为&#x2F;.(js|mjs|json|css|html)$&#x2F;i</li><li>verbose: true：是否在控制台输出压缩结果，默认为 true</li><li>threshold ：启用压缩的文件大小限制，单位是字节，默认为 0</li><li>disable : false：是否禁用压缩，默认为 false</li><li>deleteOriginFile ：压缩后是否删除原文件，默认为 false</li><li>algorithm ：采用的压缩算法，默认是 gzip</li><li>ext ：生成的压缩包后缀</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>vite</tag>
      
      <tag>打包优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css添加动态视频背景</title>
    <link href="/2024/03/04/css%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%A7%86%E9%A2%91%E8%83%8C%E6%99%AF/"/>
    <url>/2024/03/04/css%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%A7%86%E9%A2%91%E8%83%8C%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<blockquote><p>通常我们的系统顶部会有UI切图的背景，但是有的时候我们需要动态的背景，<br>这个时候我们可以使用css来添加动态视频背景,但是如果直接添加MP4,即使<br>是透明背景的mp4也会有黑边, 如下</p></blockquote><img src="/2024/03/04/css%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%A7%86%E9%A2%91%E8%83%8C%E6%99%AF/img.png" class="" width="1212"><blockquote><p>如果使用css样式</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">video</span>&#123;<br>    <span class="hljs-attribute">mix-blend-mode</span>: screen;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>背景又会过于透明</p></blockquote><img src="/2024/03/04/css%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%A7%86%E9%A2%91%E8%83%8C%E6%99%AF/img_1.png" class="" width="1212"><blockquote><p>可以考虑在底部叠加一个背景实现融合,实现了效果</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: url(&#x27;xxx&#x27;);position: absolute;z-index: 1&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">muted</span> <span class="hljs-attr">loop</span> </span><br><span class="hljs-tag">           <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: absolute;z-index: 2;mix-blend-mode: screen&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/2024/03/04/css%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%A7%86%E9%A2%91%E8%83%8C%E6%99%AF/img_2.png" class="" width="1212">]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3动态引入文件夹下的所有文件</title>
    <link href="/2024/02/26/vue3%E5%8A%A8%E6%80%81%E5%BC%95%E5%85%A5%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/"/>
    <url>/2024/02/26/vue3%E5%8A%A8%E6%80%81%E5%BC%95%E5%85%A5%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>有时我们会将相似的数据都放在同一个文件夹下,引用时如果一个一个引用就会有很多的重复代码,这时我们可以使用动态引入来解决这个问题</p></blockquote><blockquote><p>比如 我们想引用public文件夹下qiYeJianKongPoint文件夹下的所有json文件,可以这样写</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> allQiYePoint = <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-title function_">glob</span>(<span class="hljs-string">&#x27;/public/qiYeJianKongPoint/*.json&#x27;</span>, &#123; <span class="hljs-attr">eager</span>: <span class="hljs-literal">true</span>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>打印出来是一个对象,key是路径,value中的default是数据</p></blockquote><img src="/2024/02/26/vue3%E5%8A%A8%E6%80%81%E5%BC%95%E5%85%A5%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/img.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>动态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Gsap实现Cesium的3dtile抽拉动画效果</title>
    <link href="/2024/01/12/%E4%BD%BF%E7%94%A8Gsap%E5%AE%9E%E7%8E%B0Cesium%E7%9A%843dtile%E6%8A%BD%E6%8B%89%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
    <url>/2024/01/12/%E4%BD%BF%E7%94%A8Gsap%E5%AE%9E%E7%8E%B0Cesium%E7%9A%843dtile%E6%8A%BD%E6%8B%89%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近在需要做一个bim的抽拉效果,模型给的是一层的3dtile,而且,中心点位置都不对,所以调位置花了点时间</p></blockquote><blockquote><p>抽拉的主要思路就是利用gsap,在间隔时间内动态生成纬度,每次重新计算tileset的modelmatrix,实现动态调整模型的效果</p></blockquote><blockquote><p>核心的方法是对tileset的modelMatrix进行计算</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动态调整模型位置,姿态,缩放, 整体思路是,将模型移动到世界坐标中心,进行旋转,缩放,</span><br><span class="hljs-comment"> * 然后进行从模型中心点到目标点的平移,然后再应用从世界坐标中心到模型原点的平移</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> tilesetId  模型primitive的id 手动赋值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sourceCenter 模型的原点中心 加载完成后默认的tileset的 tileset.boundingSphere.center属性</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> positionLatlng 目标位置,经纬度高度格式, 需要将模型移动到的目标位置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> scale 缩放,xyz三个方向的值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> rotate 旋转,xyz三个轴旋转</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateModelMatrix</span>(<span class="hljs-params">&#123;tilesetId,sourceCenter,positionLatlng,</span><br><span class="hljs-params">                                      scale=&#123;x:<span class="hljs-number">1</span>,y:<span class="hljs-number">1</span>,z:<span class="hljs-number">1</span>&#125;,rotate=&#123;x:<span class="hljs-number">0</span>,y:<span class="hljs-number">0</span>,z:<span class="hljs-number">0</span>&#125;&#125;</span>) &#123;<br>    <span class="hljs-comment">// 计算从模型默认原点到目标点的 4阶矩阵  向量相减</span><br>    <span class="hljs-keyword">const</span> matrixMove = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">fromTranslation</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">subtract</span>(<br>        <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(positionLatlng.<span class="hljs-property">lng</span>,positionLatlng.<span class="hljs-property">lat</span>,positionLatlng.<span class="hljs-property">height</span>),<br>        sourceCenter,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>()<br>    ))<br>    <br>    <span class="hljs-comment">// 计算从世界坐标中心到模型原点的矩阵</span><br>    <span class="hljs-keyword">const</span> backto_matrix = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">fromTranslation</span>(sourceCenter);<br>    <span class="hljs-comment">// 计算从模型原点到世界中心的向量</span><br>    <span class="hljs-keyword">const</span> moveto_vec = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">multiplyByScalar</span>(sourceCenter, -<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>());<br>    <span class="hljs-comment">// 计算从模型原点到世界中心的矩阵</span><br>    <span class="hljs-keyword">const</span> moveto_matrix = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">fromTranslation</span>(moveto_vec);<br>    <span class="hljs-comment">// 生成缩放矩阵</span><br>    <span class="hljs-keyword">const</span> scaleMatrix = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">fromScale</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(scale.<span class="hljs-property">x</span>, scale.<span class="hljs-property">y</span>, scale.<span class="hljs-property">z</span>))<br>    <span class="hljs-comment">// 移动到世界坐标中心并缩放</span><br>    <span class="hljs-keyword">const</span> tempScaleMatrix = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">multiply</span>(scaleMatrix,moveto_matrix,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Matrix4</span>())<br>    <span class="hljs-comment">// 计算旋转矩阵</span><br>    <span class="hljs-keyword">const</span> rotateZMatrix = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">fromRotation</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix3</span>.<span class="hljs-title function_">fromRotationZ</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(rotate.<span class="hljs-property">z</span>)))<br>    <span class="hljs-keyword">const</span> rotateYMatrix = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">fromRotation</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix3</span>.<span class="hljs-title function_">fromRotationY</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(rotate.<span class="hljs-property">y</span>)))<br>    <span class="hljs-keyword">const</span> rotateXMatrix = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">fromRotation</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix3</span>.<span class="hljs-title function_">fromRotationX</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(rotate.<span class="hljs-property">x</span>)))<br>    <span class="hljs-keyword">const</span> rotateMatrixTemp = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">multiply</span>(rotateZMatrix,rotateYMatrix,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Matrix4</span>())<br>    <span class="hljs-keyword">const</span> rotateMatrix = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">multiply</span>(rotateXMatrix,rotateMatrixTemp,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Matrix4</span>())<br>    <span class="hljs-comment">// 在世界坐标中心,应用缩放,和旋转</span><br>    <span class="hljs-keyword">const</span> yuanDianRotateScaleMatrix = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">multiply</span>(rotateMatrix,tempScaleMatrix,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Matrix4</span>())<br>    <span class="hljs-comment">// 旋转缩放后, 对模型应用平移到目标点的矩阵</span><br>    <span class="hljs-keyword">const</span> yuanDianMoveMatrix = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">multiply</span>(matrixMove,yuanDianRotateScaleMatrix,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Matrix4</span>())<br>    <span class="hljs-comment">// 移动回原来的坐标</span><br>    <span class="hljs-keyword">const</span> matrix4Final = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">multiply</span>(backto_matrix,yuanDianMoveMatrix,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Matrix4</span>())<br>    <span class="hljs-comment">// 应用旋转</span><br>    <span class="hljs-keyword">const</span> tileset = <span class="hljs-title function_">getTilesetById</span>(tilesetId)<br>    tileset.<span class="hljs-property">modelMatrix</span> = matrix4Final<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用gsap的to方法,在一定时间内动态改变纬度值,并在回调方法中重新计算modelMatrix</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// positionLatlng 为原来的位置</span><br><span class="hljs-comment">// chouLaPosition 为抽拉后的中心位置</span><br><span class="hljs-keyword">const</span> dynamicLat = &#123;<span class="hljs-attr">lat</span>:currData.<span class="hljs-property">positionLatlng</span>.<span class="hljs-property">lat</span>&#125;<br>gsap.<span class="hljs-title function_">to</span>(dynamicLat,&#123;<br>    <span class="hljs-attr">lat</span>:currData.<span class="hljs-property">chouLaPosition</span>.<span class="hljs-property">lat</span>,<br>    <span class="hljs-attr">duration</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">ease</span>: <span class="hljs-string">&quot;power3.inOut&quot;</span>,<br>    <span class="hljs-attr">onUpdate</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c</span>) &#123;<br>        <span class="hljs-title function_">updateModelMatrix</span>(&#123;<br>            <span class="hljs-attr">tilesetId</span>:currData.<span class="hljs-property">id</span>,<br>            <span class="hljs-attr">sourceCenter</span>:currData.<span class="hljs-property">sourceCenter</span>,<br>            <span class="hljs-attr">positionLatlng</span>: &#123;<br>                <span class="hljs-attr">lat</span>:dynamicLat.<span class="hljs-property">lat</span>,<br>                <span class="hljs-attr">lng</span>:currData.<span class="hljs-property">chouLaPosition</span>.<span class="hljs-property">lng</span>,<br>                <span class="hljs-attr">height</span>:currData.<span class="hljs-property">chouLaPosition</span>.<span class="hljs-property">height</span>,<br>            &#125;,<br>            <span class="hljs-attr">scale</span>:currData.<span class="hljs-property">scale</span>,<br>            <span class="hljs-attr">rotate</span>:currData.<span class="hljs-property">rotate</span>,<br>        &#125;)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Cesium</tag>
      
      <tag>gsap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux查看空间占用情况</title>
    <link href="/2023/12/01/linux%E6%9F%A5%E7%9C%8B%E7%A9%BA%E9%97%B4%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/"/>
    <url>/2023/12/01/linux%E6%9F%A5%E7%9C%8B%E7%A9%BA%E9%97%B4%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/</url>
    
    <content type="html"><![CDATA[<p>最近在装mysql的时候, 报错</p><blockquote><p>MySQL&#x2F;Writing file error (Errcode 28)</p></blockquote><blockquote><p>搜了下, 说是空间不足了, 这搬瓦工的服务器容量也太小了, 才20g, 然后就想<br>清理一下服务器的内存, 发现这个命令很好用, 可以查看当前目录下的文件夹的大小<br>这样找到比较大的文件夹, 在删除不需要的数据即可</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">du -h --max-depth=1<br></code></pre></td></tr></table></figure><blockquote><p>看完发现之前318的图片视频占了快4个g, 然后就打算把静态资源移到别的地方<br>最后放在了阿里云oss上面, 这样还能节省服务器流量</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webstorm集成svn失败问题解决</title>
    <link href="/2023/11/30/webstorm%E9%9B%86%E6%88%90svn%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2023/11/30/webstorm%E9%9B%86%E6%88%90svn%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>拉了老的svn项目后，打开编译器却提示路径有错误，网上搜索，发现是安装时，没有勾选一个选项  </p></blockquote><blockquote><img src="/2023/11/30/webstorm%E9%9B%86%E6%88%90svn%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/img.png" class="" title="这是一个测试图片"></blockquote><blockquote><p>找到当时的安装包, 选择modify,然后勾上那个选项就可以了  </p></blockquote><blockquote><img src="/2023/11/30/webstorm%E9%9B%86%E6%88%90svn%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/img_1.png" class="" title="这是一个测试图片"></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>svn</tag>
      
      <tag>webstorm</tag>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用ffmpeg 批量转换视频格式</title>
    <link href="/2023/11/20/%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2%E8%A7%86%E9%A2%91%E6%A0%BC%E5%BC%8F/"/>
    <url>/2023/11/20/%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2%E8%A7%86%E9%A2%91%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近写博客需要批量处理视频的格式, 然后找到了这个软件,不过速度有慢<br>    对于当前文件夹下的所有MOV视频文件, 转换其格式并放入当前目录的res文件夹下</p></blockquote><p><a href="https://ffmpeg.org/ffmpeg.html#Description">ffmpeg 官方文档</a></p><blockquote><p>-threads 5 -preset ultrafast<br>这个参数是用来加速的 不加会特别慢</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in *.MOV; do ffmpeg -i &quot;$i&quot; -threads 10 -preset ultrafast &quot;res/$&#123;i%.*&#125;.mp4&quot;; done<br></code></pre></td></tr></table></figure><blockquote><p>压缩图片, 转为webp格式 更小</p></blockquote><blockquote><p>-q 后面的数字越大 压缩越明显<br>-y（全局）无需询问即可覆盖输出文件。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in *.jpg; do ffmpeg -i &quot;$i&quot; -q 100 -threads 10 -preset ultrafast &quot;res/$&#123;i%.*&#125;.jpg&quot;; done<br></code></pre></td></tr></table></figure><blockquote><p>压缩视频</p></blockquote><blockquote><p>-crf 参数 35 画质不会减少太多  57MB的视频 压缩到7MB 还可以 -r 调帧率</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in *.mp4; do ffmpeg -i &quot;$i&quot; -crf 35 -r 24 -threads 10 -preset ultrafast &quot;res/$&#123;i%.*&#125;.mp4&quot;; done<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>批处理</tag>
      
      <tag>格式转换</tag>
      
      <tag>ffmpeg</tag>
      
      <tag>视频压缩</tag>
      
      <tag>图片压缩</tag>
      
      <tag>压缩</tag>
      
      <tag>视频处理</tag>
      
      <tag>图片处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>318旅途</title>
    <link href="/2023/11/15/318%E6%97%85%E9%80%94/"/>
    <url>/2023/11/15/318%E6%97%85%E9%80%94/</url>
    
    <content type="html"><![CDATA[<p>记录从南京出发，西安转机到拉萨，拉萨自驾坦克300，反走318到成都，然后到重庆的旅程。此旅行为我和我妻子的蜜月旅行</p><h2 id="费用合计"><a href="#费用合计" class="headerlink" title="费用合计"></a>费用合计</h2><p>租车费用是350一天, 我们一共租了8天(拉萨取车,成都还车), 然后押金是1w, 还车时候退了7000, 一个月后退了3000(违章押金), </p><p>因为318 有两个网红测速点 限速30 没注意的话很容易超速100% 扣好多钱还要扣分</p><p>油费的话没仔细算 估计2000-3000, 顺便提下坦克300的油耗,拉萨市区17个, 国道看路况7-10个, 在72拐堵车加爬坡超车29.9</p><h2 id="第一站-西安"><a href="#第一站-西安" class="headerlink" title="第一站-西安"></a>第一站-西安</h2><p>   到达城墙</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8074.jpg" class="" width="1212"><p>   骑自行车, 绕着城墙骑了一圈,人都废了</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8088.jpg" class="" width="1212"><p>   鼓楼–真的有很多鼓!</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/1700059526580.jpg" class="" width="1212"><p>   还有传统乐器表演</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"/2023/11/15/318旅途/IMG_8126.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>   晚饭吃了一些面食,在洒金桥附近,这家羊肉泡馍还不错 好像叫刘信泡馍小炒</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8130.jpg" class=""><p>晚上逛了逛大唐不夜城</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8146.jpg" class=""><p>第一天就这么愉快的结束了, 第二天还是早上飞机, 东航还提供了餐食,非常不错</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8151.jpg" class=""><h2 id="第二站-拉萨"><a href="#第二站-拉萨" class="headerlink" title="第二站-拉萨"></a>第二站-拉萨</h2><p>应该到西藏了 全是山</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8156.jpg" class=""><p>乘坐机场大巴, 为什么车上这么多摄像头?? 顺带一提 我和老婆都没有什么高反，只是<br>偶尔爬楼梯的时候会喘两下，多吸两口气就好了，不过我们带的薯片 零食什么的都高反了<br>全都膨胀了</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8159.jpg" class=""><p>到达布达拉宫! 话说我和我老婆几乎没有什么高反, 只有爬楼梯的时候会有点喘</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8164.jpg" class=""><p>几张布宫近照, 布宫参观需要提前一周左右在公众号上预约. 因为布宫内是不能拍照的, 所以没有内部照片, 不过内部就是很多, 佛像 壁画等等, 主要是达赖喇嘛的灵坛, 纯金做的, 最大的灵坛重达3.7吨 </p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8179.jpg" class=""><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8205.jpg" class=""><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8212.jpg" class=""><p>俯瞰拉萨</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8214.jpg" class=""><p>晚饭 牦牛肉火锅 实话实说 西藏这边吃的挺一般的 不过这家店有店员表演西藏的舞蹈 还挺带感的</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8241.jpg" class=""><p>第二天一大早就去扎基寺啦, 是求财的地方, 买了香火和白色哈达, 然后把买的手串什么的给大师开光</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8242.jpg" class=""><p>中午的时候, 租车的人说车到了,让我们去拿车, 这车脏的呀..</p><p>开车路过布宫广场, 还是很有意境的</p><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"video":{"url":"/2023/11/15/318旅途/IMG_8278.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>来大昭寺了, 一整天暴走的行程</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8315.jpg" class=""><p>门口的朝圣者</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8336.jpg" class=""><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8337.jpg" class=""><p>坦克300拉萨市区真实油耗 17个油</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8339.jpg" class=""><p>洗车啦 </p><div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"video":{"url":"/2023/11/15/318旅途/IMG_8343.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>早上在扎基寺排队的时候, 遇到一个徒步来西藏的狠人, 聊了两句他说这里东西便宜哈哈哈, 我们就来了, 然后买了藏红花, 小饰品等等, 跟老板说我们是徒步的小伙子介绍来的, 打折! 而且送了我们证书和奖牌!!</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8366.jpg" class=""><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8367.jpg" class=""><p>还没开始走就拿到证书了, 笑死</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8371.jpg" class=""><p>第二天一早起来,打卡药王山,本来是准备昨天下午去的, 但是晚了2分钟,门就关了, 挺无语的..</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8375.jpg" class=""><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8384.jpg" class=""><p>加个油准备离开拉萨了, 油价比内地贵呀, 加油还要看身份证</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8388.jpg" class=""><p>赶了一天路到林芝,晚上吃了个藏猪石锅, 猪肉味道太大, 吃不下. 在林芝住了一晚,<br>第二天出发去巴松措</p><h2 id="第三站-巴松措-绿宝石"><a href="#第三站-巴松措-绿宝石" class="headerlink" title="第三站-巴松措-绿宝石"></a>第三站-巴松措-绿宝石</h2><p>到达巴松措 这里进去要额外交钱,除非你定了里面的民宿,然后我们美团<br>定了个民宿 去游客中心开了个单子,他就放我们进去了, 然后我们把民宿取消了<br>hhhhhh</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8415.jpg" class=""><p>湖水是绿色的 很好看</p><div id="dplayer3" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer3"),"video":{"url":"/2023/11/15/318旅途/IMG_8426.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>车子停在小树林里, 有一种林中猛虎的感觉</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8432.jpg" class=""><p>在巴松措玩到下午, 晚上好像在波密住了一晚, 第二天出发去鲁朗了</p><p>翻过栅栏和藏民的牛在一块</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8470.jpg" class=""><p>被牦牛挡住去路</p><div id="dplayer4" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer4"),"video":{"url":"/2023/11/15/318旅途/IMG_8561.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><h2 id="第四站-鲁朗小镇"><a href="#第四站-鲁朗小镇" class="headerlink" title="第四站-鲁朗小镇"></a>第四站-鲁朗小镇</h2><p>鲁朗小镇还是很好看的,老婆大人很喜欢</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8576.jpg" class=""><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8579.jpg" class=""><p>腰带云 很神奇</p><div id="dplayer5" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer5"),"video":{"url":"/2023/11/15/318旅途/IMG_8710.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>塌方 堵车了</p><div id="dplayer6" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer6"),"video":{"url":"/2023/11/15/318旅途/IMG_8720.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>然乌湖的水很浑浊,不太好看, 估计来的季节不对,没有多做停留,我们准备去来<br>古冰川玩一下, </p><h2 id="第五站-来古冰川"><a href="#第五站-来古冰川" class="headerlink" title="第五站-来古冰川"></a>第五站-来古冰川</h2><p>第一次见到冰川, 虽然不是视频上那种蓝色的, 数量也不多<br>不过还是挺震撼的</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/IMG_8768.jpg" class=""><p>要去来古冰川内部的话 要坐村民的车子,当然也可以自己开车,就是路比较难走, 泥地很滑,<br>边上就是悬崖, 我是不敢开…<br>这个不知道多少年的老丰田, 在泥地里扭来扭去, 配上藏族dj, 很有意思</p><div id="dplayer7" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer7"),"video":{"url":"/2023/11/15/318旅途/IMG_8774.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>到冰洞了</p><img src="/2023/11/15/318%E6%97%85%E9%80%94/1700059781123.jpg" class=""><p>在藏民的帐篷里吃东西</p><div id="dplayer8" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer8"),"video":{"url":"/2023/11/15/318旅途/IMG_8845.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>晚上的路 太可怕了 边上就是悬崖, 还有湿滑的泥地  还好我没自己开车</p><div id="dplayer9" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer9"),"video":{"url":"/2023/11/15/318旅途/IMG_8848.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>晚上住在藏民家里,只有一个小小房间, 把我俩挤死了, 车子就停在藏民家的院子里, 边上就是牦牛….</p><p>第二天早上起来准备吃早饭</p><p>早饭是藏民做的 酥油茶(喝不惯) 青稞饼(这个不错,甜甜的) 藏巴(吃不惯,粉末状)</p><p>离开来古村的时候 居然看到了彩虹</p><p>来古村内的美景</p><div id="dplayer10" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer10"),"video":{"url":"/2023/11/15/318旅途/IMG_8909.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>水面倒影 宛如仙境</p><div id="dplayer11" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer11"),"video":{"url":"/2023/11/15/318旅途/IMG_8917.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><h2 id="第六站-怒江72拐-大堵车"><a href="#第六站-怒江72拐-大堵车" class="headerlink" title="第六站-怒江72拐(大堵车)"></a>第六站-怒江72拐(大堵车)</h2><p>离开来古冰川, 要去怒江72拐了 又修路了</p><div id="dplayer12" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer12"),"video":{"url":"/2023/11/15/318旅途/IMG_8934.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>本来以为是个小堵车,结果直接从下午两点 堵到晚上九点…</p><div id="dplayer13" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer13"),"video":{"url":"/2023/11/15/318旅途/IMG_8958.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>堵车无聊中, 有人发现了野生动物, 藏得真深 不仔细看看不出来</p><div id="dplayer14" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer14"),"video":{"url":"/2023/11/15/318旅途/IMG_8964.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>开动了 又堵了</p><div id="dplayer15" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer15"),"video":{"url":"/2023/11/15/318旅途/IMG_8965.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>到酒店已经两点多了 又冷又饿 吃个泡面睡觉</p><p>第二天继续出发! 沿途美景</p><p>措普沟 门票太贵 路过打卡!</p><h2 id="第七站-新都桥—云绕雅拉-贡嘎雪山"><a href="#第七站-新都桥—云绕雅拉-贡嘎雪山" class="headerlink" title="第七站-新都桥—云绕雅拉&#x2F;贡嘎雪山"></a>第七站-新都桥—云绕雅拉&#x2F;贡嘎雪山</h2><p>到达新都桥! 接下来的目标是两座雪山! 雅拉神山 和贡嘎雪山!</p><p>在新都桥加了个油, 转G248国道, 前往云绕雅拉, 开过去发现位置不对, 还是<br>一个村民给我们带路的, 我们是下午去的有点晚了看不到金山了, 然后打算在山顶过夜,<br> 睡车里, 然后在收费关卡(20一人垃圾费), 碰到一个同样睡车里的阿里的大哥, 唠了一会</p><p>拍的星空</p><p>第二天早上, 准备去观景台了, 昨晚说一起上山的大哥高反了…</p><p>旋转帽子云</p><div id="dplayer16" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer16"),"video":{"url":"/2023/11/15/318旅途/IMG_9239.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>最终形态</p><p>下山了,远远就能看到贡嘎! </p><div id="dplayer17" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer17"),"video":{"url":"/2023/11/15/318旅途/IMG_9317.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>去贡嘎雪山的路上, 碰到一个玩泥巴的车</p><p>到贡嘎村了 路是真的烂啊</p><p>蜀山之王-贡嘎雪山!! 但是云</p><p>在山顶上遇到一个苏A的特斯拉车主, 都是南京的聊了一会, 这老哥从南京开到成都,26个小时<br>一口气开完, 也是个狠人</p><p>等待云雾散去 最终也没散去, 但是出现了双拱门彩虹!!</p><div id="dplayer18" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer18"),"video":{"url":"/2023/11/15/318旅途/IMG_9380.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>翻过折多山, 雾超级大, 挺危险的</p><div id="dplayer19" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer19"),"video":{"url":"/2023/11/15/318旅途/IMG_9496.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>晚上住在康定, 第二天来打个卡, 就出发去成都了</p><p>过了这个桥, 又开了很长的隧道, 就到成都了</p><div id="dplayer20" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer20"),"video":{"url":"/2023/11/15/318旅途/IMG_9390.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><h2 id="第八站-成都"><a href="#第八站-成都" class="headerlink" title="第八站-成都"></a>第八站-成都</h2><p>到成都了 嗨呀</p><p>来看大熊猫了</p><div id="dplayer21" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer21"),"video":{"url":"/2023/11/15/318旅途/IMG_9456.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>逛人民公园 买了个鸡哥</p><p>来到赵雷歌里唱的地方, 这个小酒馆, 居然真的就叫 “小酒馆”</p><p>走到玉林路的尽头, 坐在小酒馆的门口</p><h2 id="第九站-重庆"><a href="#第九站-重庆" class="headerlink" title="第九站-重庆"></a>第九站-重庆</h2><p>重庆主要是玩了市区的几个景点, 人巨多, 主要就是拍照打卡. 吃了两顿火锅, 好辣,<br>不过味道还不错</p><p>李子坝 打卡</p><div id="dplayer22" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer22"),"video":{"url":"/2023/11/15/318旅途/IMG_9563.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>洪崖洞 人巨多 排队 </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体来说 这趟旅行还是不错的 不过感觉时间有点紧, 稻城亚丁没时间去<br>还有就是, 来318玩, 来的季节 和天气很重要, 3 4 月份然乌湖水很清澈,<br>过几个月雪化了,就浑浊了, 冬天来雪会比较多, 天气会直接影响能不能看到日照金山<br>不过这次没看到 下次可以再来<br>出来玩 一定要带三脚架啊, 无人机感觉也挺不错的 拍风景很好 这次啥都没准备….</p>]]></content>
    
    
    
    <tags>
      
      <tag>旅行</tag>
      
      <tag>记录</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高性价比稳定翻墙/梯子/vpn/推荐</title>
    <link href="/2023/11/14/%E9%AB%98%E6%80%A7%E4%BB%B7%E6%AF%94%E7%A8%B3%E5%AE%9A%E6%A2%AF%E5%AD%90%E6%8E%A8%E8%8D%90/"/>
    <url>/2023/11/14/%E9%AB%98%E6%80%A7%E4%BB%B7%E6%AF%94%E7%A8%B3%E5%AE%9A%E6%A2%AF%E5%AD%90%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<h2 id="郑重声明"><a href="#郑重声明" class="headerlink" title="郑重声明"></a>郑重声明</h2><blockquote><p><strong>本文所介绍产品主要是为了方便学习、科研以及外贸工作。请遵守中华人民共和国法律法规，切勿在任何地方发布分裂国家，激化民族矛盾的言论。</strong></p></blockquote><h2 id="翻墙工具"><a href="#翻墙工具" class="headerlink" title="翻墙工具"></a>翻墙工具</h2><p>三网专用客户端，使用指南和下载看<a href="https://www.helptally.com/">这里</a></p><h2 id="顶级机场"><a href="#顶级机场" class="headerlink" title="顶级机场"></a>顶级机场</h2><pre><code class="hljs">这里的机场都是一线机场，全网顶级机场。脱离性价比的范畴了</code></pre><h3 id="奶昔-点我跳转购买"><a href="#奶昔-点我跳转购买" class="headerlink" title="奶昔(点我跳转购买)"></a><a href="https://nxboom.com/signupbyemail.aspx?MemberCode=eb16ec7b409644d58cbb00e466f6e60920231115103219">奶昔(点我跳转购买)</a></h3><pre><code class="hljs">最强机场 | 111元每月500G | 1048元/年/每月500G最强的机场，同时也最贵，限购，量力而行，全网不多的采用唯云专线的机场，东莞电信，唯云东莞、上海，江苏电信，上海移动，镇江BGP等专线入口</code></pre><h2 id="高端机场"><a href="#高端机场" class="headerlink" title="高端机场"></a>高端机场</h2><pre><code class="hljs">这里的机场都是比较贵的专线机场，但是比较稳定，有三线机场，有二线机场  </code></pre><h3 id="泡泡狗-点我跳转购买"><a href="#泡泡狗-点我跳转购买" class="headerlink" title="泡泡狗(点我跳转购买)"></a><a href="https://iepl.io/#/register?code=HcSaDpBw">泡泡狗(点我跳转购买)</a></h3><pre><code class="hljs">8.8元70G/12.5元110G 专线机场 低倍率节点</code></pre><h3 id="Infinite-titan-点我跳转购买"><a href="#Infinite-titan-点我跳转购买" class="headerlink" title="Infinite titan(点我跳转购买)"></a><a href="https://eleme.pro/auth/register?code=EqmJD7uDE7">Infinite titan(点我跳转购买)</a></h3><pre><code class="hljs">33元200G/55元500G/88元1000G/110元2000G</code></pre><h3 id="dual-点我跳转购买"><a href="#dual-点我跳转购买" class="headerlink" title="dual(点我跳转购买)"></a><a href="https://dashsrc.dualnet.io/#/register?code=4sDTnoRf">dual(点我跳转购买)</a></h3><pre><code class="hljs">178/年/每月25G 300/年/每月100G 越高等级套餐越划算！</code></pre><h2 id="性价比机场"><a href="#性价比机场" class="headerlink" title="性价比机场"></a>性价比机场</h2><pre><code class="hljs">这里是我推荐的最多的机场，也是大家日常使用来说价格和质量最合适的机场分类</code></pre><h3 id="ouo-点我跳转购买"><a href="#ouo-点我跳转购买" class="headerlink" title="ouo(点我跳转购买)"></a><a href="https://ouonetwork.b-cdn.net/reguser?aff=zcRMWT6C">ouo(点我跳转购买)</a></h3><pre><code class="hljs">6元100G/66元每年300G/多地区中转/低倍率</code></pre><h3 id="COO-点我跳转购买"><a href="#COO-点我跳转购买" class="headerlink" title="COO(点我跳转购买)"></a><a href="https://web.coo.wiki/#/register?code=gS3OLmaI">COO(点我跳转购买)</a></h3><pre><code class="hljs">9.9元300G/还有年付和永久流量包 低倍率节点</code></pre><h3 id="中国国际机场-点我跳转购买"><a href="#中国国际机场-点我跳转购买" class="headerlink" title="中国国际机场(点我跳转购买)"></a><a href="https://wget.moe/#/register?code=XjkHU7SW">中国国际机场(点我跳转购买)</a></h3><pre><code class="hljs">10元500G流量/有不限时套餐</code></pre><h3 id="XFSS-点我跳转购买"><a href="#XFSS-点我跳转购买" class="headerlink" title="XFSS(点我跳转购买)"></a><a href="https://xfltd.org/#/register?code=8qca1mJ1">XFSS(点我跳转购买)</a></h3><pre><code class="hljs">1元17G/7元150G 有10元120G不限时套餐！</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>vpn</tag>
      
      <tag>翻墙</tag>
      
      <tag>梯子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS实现文字首行缩进</title>
    <link href="/2023/11/14/CSS%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E9%A6%96%E8%A1%8C%E7%BC%A9%E8%BF%9B/"/>
    <url>/2023/11/14/CSS%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E9%A6%96%E8%A1%8C%E7%BC%A9%E8%BF%9B/</url>
    
    <content type="html"><![CDATA[<p>css中提供了首行缩进的属性，只要将​text-indent​设置一个值，就能实现首行缩进的效果。最常用的值是以em为单位的值，​2em​表示二倍当前字体大小，以​16px​为例，​2em​就是​32px​，也就是两个字符的距离。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    测试文本吼吼吼吼吼吼吼吼吼吼吼吼吼吼吼<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.text</span>&#123;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>; //首行缩进 <span class="hljs-number">2em</span>表示二倍当前字体大小<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cesium添加gif</title>
    <link href="/2023/10/18/cesium%E6%B7%BB%E5%8A%A0gif/"/>
    <url>/2023/10/18/cesium%E6%B7%BB%E5%8A%A0gif/</url>
    
    <content type="html"><![CDATA[<p>两个思路</p><h3 id="思路一-用libgif-js解析gif中的图片-然后赋值到billboard中的image-通过callbackProperty实现"><a href="#思路一-用libgif-js解析gif中的图片-然后赋值到billboard中的image-通过callbackProperty实现" class="headerlink" title="思路一: 用libgif.js解析gif中的图片,然后赋值到billboard中的image,通过callbackProperty实现"></a>思路一: 用libgif.js解析gif中的图片,然后赋值到billboard中的image,通过callbackProperty实现</h3><p>libgif这个库好像很老了,用npm安装后import好像不太对,然后我直接把那个js拷贝进来,然后引入js,修改一下把工厂函数挂到window上就可以正常使用了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span> (<span class="hljs-params">root, factory</span>) &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">SuperGif</span> = <span class="hljs-title function_">factory</span>();<br>&#125;(<span class="hljs-variable language_">this</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 源代码xxxx</span><br>&#125;))<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">addBillboard</span>(<span class="hljs-params">list:<span class="hljs-built_in">Array</span>&lt;billboardList&gt;</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> e = list[i];<br>    <span class="hljs-keyword">let</span> gifDiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>    <span class="hljs-keyword">let</span> gifImg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>)<br><br>    <span class="hljs-comment">// gif库需要img标签配置下面两个属性</span><br>    gifImg.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;rel:animated_src&#x27;</span>, <span class="hljs-title function_">getAssetsFile</span>(e.<span class="hljs-property">imgUrl</span>))<br>    gifImg.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;rel:auto_play&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-comment">// 设置自动播放属性</span><br>    gifDiv.<span class="hljs-title function_">appendChild</span>(gifImg)<br>    <span class="hljs-keyword">let</span> superGif = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperGif</span>(&#123;<br>      <span class="hljs-attr">gif</span>:gifImg<br>    &#125;)<br>    superGif.<span class="hljs-title function_">load</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;companyPoint&#x27;</span>,<br>        <span class="hljs-attr">position</span>:<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(e.<span class="hljs-property">lng</span>,e.<span class="hljs-property">lat</span>),<br>        <span class="hljs-attr">billboard</span>:&#123;<br>          <span class="hljs-attr">image</span>:<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">CallbackProperty</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-keyword">return</span> superGif.<span class="hljs-title function_">get_canvas</span>().<span class="hljs-title function_">toDataURL</span>()<br>          &#125;,<span class="hljs-literal">false</span>),<br>          <span class="hljs-comment">// disableDepthTestDistance: Number.POSITIVE_INFINITY,</span><br>          <span class="hljs-attr">scale</span>:<span class="hljs-number">0.5</span>,<br>          <span class="hljs-attr">pixelOffset</span>:<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian2</span>(<span class="hljs-number">0</span>,-<span class="hljs-number">238</span>*<span class="hljs-number">0.4</span>*<span class="hljs-number">0.4</span>),<br>          <span class="hljs-attr">heightReference</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">HeightReference</span>.<span class="hljs-property">CLAMP_TO_GROUND</span><br>        &#125;<br>      &#125;)<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路二-直接生成html元素-然后通过viewer-scene-cartesianToCanvasCoordinates方法更新dom元素的位置"><a href="#思路二-直接生成html元素-然后通过viewer-scene-cartesianToCanvasCoordinates方法更新dom元素的位置" class="headerlink" title="思路二: 直接生成html元素 然后通过viewer.scene.cartesianToCanvasCoordinates方法更新dom元素的位置"></a>思路二: 直接生成html元素 然后通过viewer.scene.cartesianToCanvasCoordinates方法更新dom元素的位置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">addBillboardV2</span>(<span class="hljs-params">list:<span class="hljs-built_in">Array</span>&lt;billboardList&gt;</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> e = list[i];<br>    <span class="hljs-comment">// let gifImg = document.createElement(&#x27;img&#x27;)</span><br>    <span class="hljs-comment">// gifImg.setAttribute(&#x27;src&#x27;,getAssetsFile(e.imgUrl))</span><br><br>    <span class="hljs-keyword">let</span> gifImg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;video&#x27;</span>)<br>    gifImg.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;src&#x27;</span>,<span class="hljs-title function_">getAssetsFile</span>(e.<span class="hljs-property">videoUrl</span>))<br><br>    gifImg.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&#x27;absolute&#x27;</span><br>    gifImg.<span class="hljs-property">style</span>.<span class="hljs-property">zIndex</span> = <span class="hljs-string">&#x27;10&#x27;</span><br>    gifImg.<span class="hljs-property">style</span>.<span class="hljs-property">pointerEvents</span> = <span class="hljs-string">&#x27;none&#x27;</span><br>    gifImg.<span class="hljs-property">style</span>.<span class="hljs-property">mixBlendMode</span> = <span class="hljs-string">&#x27;screen&#x27;</span><br>    gifImg.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;id&#x27;</span>,e.<span class="hljs-property">name</span>)<br>    gifImg.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;width&#x27;</span>,<span class="hljs-number">250</span>)<br>    gifImg.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;height&#x27;</span>,<span class="hljs-number">250</span>/<span class="hljs-number">1.5</span>)<br>    <span class="hljs-comment">// gifImg.setAttribute(&#x27;autoplay&#x27;,&#x27;true&#x27;)</span><br>    <span class="hljs-comment">// gifImg.setAttribute(&#x27;muted&#x27;,&#x27;muted&#x27;)</span><br>    <span class="hljs-comment">// gifImg.setAttribute(&#x27;loop&#x27;,&#x27;true&#x27;)</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(gifImg)<br>    list[i].<span class="hljs-property">ele</span> = gifImg<br>    <span class="hljs-comment">// 必须得这样写 上面这个没用 gifImg.setAttribute(&#x27;muted&#x27;,&#x27;muted&#x27;)</span><br>    gifImg.<span class="hljs-property">muted</span> = <span class="hljs-literal">true</span><br>    gifImg.<span class="hljs-property">loop</span> = <span class="hljs-literal">true</span><br>    gifImg.<span class="hljs-property">autoplay</span> = <span class="hljs-literal">true</span><br>  &#125;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">preRender</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-keyword">async</span> ()=&gt; &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">const</span> e = list[i];<br>      <span class="hljs-keyword">const</span> position = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(e.<span class="hljs-property">lng</span>,e.<span class="hljs-property">lat</span>,e.<span class="hljs-property">height</span>);<br>      <span class="hljs-keyword">const</span> canvasPosition = <span class="hljs-variable language_">window</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-title function_">cartesianToCanvasCoordinates</span>(position, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian2</span>());<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Cesium</span>.<span class="hljs-title function_">defined</span>(canvasPosition)) &#123;<br>        e.<span class="hljs-property">ele</span>.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = canvasPosition.<span class="hljs-property">y</span> - e.<span class="hljs-property">ele</span>.<span class="hljs-property">height</span>/<span class="hljs-number">1.2</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>        e.<span class="hljs-property">ele</span>.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = canvasPosition.<span class="hljs-property">x</span> - e.<span class="hljs-property">ele</span>.<span class="hljs-property">width</span>/<span class="hljs-number">2</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">ele</span>.<span class="hljs-property">paused</span>)&#123;<br>          e.<span class="hljs-property">ele</span>.<span class="hljs-title function_">play</span>()<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优化cesium的3dtile加载速度</title>
    <link href="/2023/09/12/%E4%BC%98%E5%8C%96cesium%E7%9A%843dtile%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6/"/>
    <url>/2023/09/12/%E4%BC%98%E5%8C%96cesium%E7%9A%843dtile%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>之前加载3dtile 总是要等到网络请求把第一层的json文件请求完后才会开始在底图上加载,经过如下优化,速度快了一些</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span> tileset2 = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cesium3DTileset</span>.<span class="hljs-title function_">fromUrl</span>(<br>  <span class="hljs-string">&quot;http://xxxxxxxxxxxxxx/tileset.json&quot;</span>,<br>  &#123;<br>    <span class="hljs-attr">maximumScreenSpaceError</span>: <span class="hljs-number">48</span>, <span class="hljs-comment">//决定精细度,同样的距离,值越小越精细</span><br>    <span class="hljs-attr">skipLevels</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">skipLevelOfDetail</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">//让cesium在遍历请求tile.json的时候可以加载图块</span><br>    <span class="hljs-attr">skipScreenSpaceErrorFactor</span>: <span class="hljs-number">128</span>,<span class="hljs-comment">//这三个skip的配置可以让模型立即加载</span><br>    <span class="hljs-attr">backFaceCulling</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">maximumMemoryUsage</span>: <span class="hljs-number">200</span><br>  &#125;<br>);<br><br></code></pre></td></tr></table></figure><p>最快的还是下面这个<br>加载时 有个merge_tile.json 加这个就会非常快</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vite打包时ts找不到文件导致eslint报错解决</title>
    <link href="/2023/09/11/vite%E6%89%93%E5%8C%85%E6%97%B6ts%E6%89%BE%E4%B8%8D%E5%88%B0%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4eslint%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    <url>/2023/09/11/vite%E6%89%93%E5%8C%85%E6%97%B6ts%E6%89%BE%E4%B8%8D%E5%88%B0%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4eslint%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>最近新建了一个项目,启用了eslint 打包的时候,eslint一直报错,解决如下</p><p>首先是eslint可能会检测到npm包里的一些代码,这些代码改不了,可以通过添加eslintignore文件来 告诉eslint,哪些文件不用检查</p><p>vite中配置@ 符号指向 src目录 此时引用ts会找不到<br>首先在src 目录下的  env.d.ts文件下 添加如下代码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;*.vue&#x27;</span> &#123;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">DefineComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br>  <span class="hljs-comment">// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/ban-types</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">component</span>: <span class="hljs-title class_">DefineComponent</span>&lt;&#123;&#125;, &#123;&#125;, <span class="hljs-built_in">any</span>&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> component<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在tsconfig.json文件的compilerOptions中添加 baseUrl 和 paths</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;baseUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;paths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@/*&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;src/*&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这样ts就能够识别  这样的语句了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">FogEffect</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/core/weather/FogEffect&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vite</tag>
      
      <tag>eslint</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vite打包后找不到图片</title>
    <link href="/2023/09/06/vite%E6%89%93%E5%8C%85%E5%90%8E%E6%89%BE%E4%B8%8D%E5%88%B0%E5%9B%BE%E7%89%87/"/>
    <url>/2023/09/06/vite%E6%89%93%E5%8C%85%E5%90%8E%E6%89%BE%E4%B8%8D%E5%88%B0%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>最近启了一个vite新项目 打包之后,项目里通过getAssetsFile动态引入的静态资源全都找不到了,最后发现是路径的问题</p><p>我是这么写的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getAssetsFile</span>(<span class="hljs-params">url</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;../assets/&#x27;</span> + url, <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>).<span class="hljs-property">href</span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>一开始没有理解官方文档的意思，其实文档里这里已经说了，这里是不能用变量的</p><img src="/2023/09/06/vite%E6%89%93%E5%8C%85%E5%90%8E%E6%89%BE%E4%B8%8D%E5%88%B0%E5%9B%BE%E7%89%87/img.png" class="" title="这是一个测试图片"><p>只有用模板字面量的写法，才能确保是静态的路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getAssetsFile</span>(<span class="hljs-params">url</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">`../assets/<span class="hljs-subst">$&#123;url&#125;</span>`</span>, <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>).<span class="hljs-property">href</span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>cesium加载label文字模糊的问题解决</title>
    <link href="/2023/09/05/cesium%E5%8A%A0%E8%BD%BDlabel%E6%96%87%E5%AD%97%E6%A8%A1%E7%B3%8A%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2023/09/05/cesium%E5%8A%A0%E8%BD%BDlabel%E6%96%87%E5%AD%97%E6%A8%A1%E7%B3%8A%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>使用canvas生成要展示的标签, 一般是背景图片加上文字 然后塞入billbord的image中 </p><p>调用 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> img = <span class="hljs-title function_">getAssetsFile</span>(<span class="hljs-string">&#x27;imgs/marker/pointMarker.png&#x27;</span>)<br><span class="hljs-keyword">const</span> text = f.<span class="hljs-property">properties</span>[<span class="hljs-string">&#x27;qymc&#x27;</span>]<br><span class="hljs-keyword">const</span> canvas = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getBillbordCanvas</span>(&#123; img, text, <span class="hljs-attr">ratio</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">width</span>: <span class="hljs-number">465</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">60</span> &#125;)<br><span class="hljs-keyword">const</span> entity = <span class="hljs-variable language_">window</span>.<span class="hljs-property">gViewer</span>.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>    <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">name</span>: type,<br>    <span class="hljs-attr">position</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(...f.<span class="hljs-property">geometry</span>.<span class="hljs-property">coordinates</span>, <span class="hljs-number">40</span>),<br>    <span class="hljs-attr">billboard</span>: &#123;<br>        <span class="hljs-attr">image</span>: canvas,<br>        <span class="hljs-attr">disableDepthTestDistance</span>: <span class="hljs-title class_">Number</span>.<span class="hljs-property">POSITIVE_INFINITY</span>,<br>        <span class="hljs-comment">// scale: 0.6,</span><br>        <span class="hljs-attr">scaleByDistance</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">NearFarScalar</span>(<span class="hljs-number">1800</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">0.4</span>),<br>        <span class="hljs-comment">// translucencyByDistance: new Cesium.NearFarScalar(1800, 1, 3000, 0.1)</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成billbodr 的canvas</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">img</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">text</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getBillbordCanvas</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  img,</span><br><span class="hljs-params">  ratio,</span><br><span class="hljs-params">  width,</span><br><span class="hljs-params">  height,</span><br><span class="hljs-params">  text,</span><br><span class="hljs-params">  textFontSize = <span class="hljs-string">&#x27;36px&#x27;</span>,</span><br><span class="hljs-params">  textPositionX = width / <span class="hljs-number">10</span> + <span class="hljs-number">10</span>,</span><br><span class="hljs-params">  textPositionY = height / <span class="hljs-number">2</span> + <span class="hljs-number">15</span></span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>); <span class="hljs-comment">//创建canvas标签</span><br>    <span class="hljs-keyword">const</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>    canvas.<span class="hljs-property">style</span>.<span class="hljs-property">opacity</span> = <span class="hljs-number">1</span>;<br>    canvas.<span class="hljs-property">width</span> = width * ratio;<br>    canvas.<span class="hljs-property">height</span> = height * ratio;<br><br>    <span class="hljs-comment">//然后将画布缩放，将图像放大ratio倍画到画布上 目的 使图片文字更加清晰</span><br>    ctx.<span class="hljs-title function_">scale</span>(ratio, ratio);<br>    <span class="hljs-keyword">const</span> image = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>    image.<span class="hljs-property">src</span> = img;<br>    <span class="hljs-comment">// 图片创建是异步操作，需要在图片完成之后，再写入文字，能保证文字在图片上方。</span><br>    <span class="hljs-comment">// 如果不在里面，会出现图片覆盖文字</span><br>    image.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      ctx.<span class="hljs-title function_">drawImage</span>(image, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br>      <span class="hljs-comment">// 名称文字</span><br>      ctx.<span class="hljs-property">font</span> = <span class="hljs-string">`bold <span class="hljs-subst">$&#123;textFontSize&#125;</span> YouSheBiaoTiHei`</span>;<br>      <span class="hljs-keyword">const</span> gradient = ctx.<span class="hljs-title function_">createLinearGradient</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">height</span> - <span class="hljs-number">45</span>);<br>      gradient.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;#FFFFFF&quot;</span>);<br>      gradient.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;#ffffff&quot;</span>);<br>      ctx.<span class="hljs-property">fillStyle</span> = gradient;<br>      ctx.<span class="hljs-title function_">fillText</span>(text, textPositionX, textPositionY);<br>      <span class="hljs-title function_">resolve</span>(canvas)<br>    &#125;;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>cesium使用primitive添加动态墙体</title>
    <link href="/2023/09/04/cesium%E4%BD%BF%E7%94%A8primitive%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E5%A2%99%E4%BD%93/"/>
    <url>/2023/09/04/cesium%E4%BD%BF%E7%94%A8primitive%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E5%A2%99%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<p>踩坑记录 在网上找的教程,但是写出来怎么都不对,最后发现是geometry的 vertexFormat写错了导致shader的效果很奇怪</p><p>有点疑惑 什么样子的shader 要配合 对应的顶点格式  挖个坑先</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加动态墙体</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> wallList   cartesian3 list</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> maximumHeights 最大高度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> minimumHeights 最小高度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">addWallGeojson</span>(<span class="hljs-params">wallList, maximumHeights, minimumHeights, type, defaultShow</span>) &#123;<br>    <span class="hljs-keyword">const</span> geometryInstances = wallList.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">positions</span> =&gt;</span> &#123;<br>        positions.<span class="hljs-title function_">push</span>(positions[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">GeometryInstance</span>(&#123;<br>            <span class="hljs-attr">geometry</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">WallGeometry</span>(&#123;<br>                <span class="hljs-attr">positions</span>: positions,<br>                <span class="hljs-attr">maximumHeights</span>: positions.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> maximumHeights),<br>                <span class="hljs-attr">minimumHeights</span>: positions.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> minimumHeights),<br>                <span class="hljs-attr">vertexFormat</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">MaterialAppearance</span>.<span class="hljs-property">VERTEX_FORMAT</span><br>            &#125;)<br>        &#125;)<br>    &#125;)<br>    <span class="hljs-keyword">const</span> wall = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Primitive</span>(&#123;<br>        <span class="hljs-attr">show</span>: defaultShow,<br>        geometryInstances,<br>        <span class="hljs-attr">appearance</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">MaterialAppearance</span>(&#123;<br>            <span class="hljs-attr">material</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Material</span>(&#123;<br>                <span class="hljs-attr">fabric</span>: &#123;<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;DynamicWall&#x27;</span>,<br>                    <span class="hljs-attr">uniforms</span>: &#123;<br>                        <span class="hljs-attr">image</span>: <span class="hljs-title function_">getAssetsFile</span>(<span class="hljs-string">&#x27;imgs/materialImg/wall.png&#x27;</span>),<br>                        <span class="hljs-comment">// image: getAssetsFile(&#x27;/imgs/marker/pointMarker.png&#x27;),</span><br>                        <span class="hljs-comment">// image: getAssetsFile(&#x27;/imgs/marker/polygonMarker.png&#x27;),</span><br>                        <span class="hljs-attr">color</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-title function_">fromCssColorString</span>(typeColorDic[type]),<br>                        <span class="hljs-attr">speed</span>: <span class="hljs-number">2</span><br>                    &#125;,<br>                    <span class="hljs-attr">source</span>: <span class="hljs-string">`</span><br><span class="hljs-string">              czm_material czm_getMaterial(czm_materialInput materialInput) &#123;</span><br><span class="hljs-string">                  czm_material material = czm_getDefaultMaterial(materialInput);</span><br><span class="hljs-string">                  vec2 st = materialInput.st;</span><br><span class="hljs-string">                  vec4 colorImage = texture(image, vec2((1. - fract(st.t - speed * czm_frameNumber * 0.005)), st.t));</span><br><span class="hljs-string">                  vec4 fragColor;</span><br><span class="hljs-string">                  fragColor.rgb = color.rgb / 1.0;</span><br><span class="hljs-string">                  fragColor = czm_gammaCorrect(fragColor); // 伽马校正</span><br><span class="hljs-string">                  material.alpha = colorImage.a * color.a * .5;</span><br><span class="hljs-string">                  material.diffuse = color.rgb;</span><br><span class="hljs-string">                  material.emission = fragColor.rgb;</span><br><span class="hljs-string">                  return material;</span><br><span class="hljs-string">              &#125;</span><br><span class="hljs-string">          `</span><br>                &#125;,<br>            &#125;)<br>        &#125;)<br>    &#125;)<br>    wall.<span class="hljs-property">name</span> = type<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">gViewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">primitives</span>.<span class="hljs-title function_">add</span>(wall)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cesium for Unreal html展示</title>
    <link href="/2023/08/23/UE%E5%BC%95%E6%93%8Ehtml%E5%B1%95%E7%A4%BA/"/>
    <url>/2023/08/23/UE%E5%BC%95%E6%93%8Ehtml%E5%B1%95%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><pre><code class="hljs">最近在研究怎么把</code></pre><p>采用cesium for unreal插件  打包时使用数据流送的方式实现在浏览器中的访问</p>]]></content>
    
    
    
    <tags>
      
      <tag>ue</tag>
      
      <tag>UE - cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cesium实现横断面分析</title>
    <link href="/2023/08/21/Cesium%E5%AE%9E%E7%8E%B0%E6%A8%AA%E6%96%AD%E9%9D%A2%E5%88%86%E6%9E%90/"/>
    <url>/2023/08/21/Cesium%E5%AE%9E%E7%8E%B0%E6%A8%AA%E6%96%AD%E9%9D%A2%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="/2023/08/21/Cesium%E5%AE%9E%E7%8E%B0%E6%A8%AA%E6%96%AD%E9%9D%A2%E5%88%86%E6%9E%90/hengDuanMian.png" class="" title="This is an image"><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ol><li>绘制一条线</li><li>和管线二维图层求交点</li><li>计算交点高程等信息</li><li>canvas绘制</li><li>绘制平面展示</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>cesium</tag>
      
      <tag>管线</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端语音转文字技术路线</title>
    <link href="/2023/08/21/%E5%89%8D%E7%AB%AF%E8%AF%AD%E9%9F%B3%E8%BD%AC%E6%96%87%E5%AD%97/"/>
    <url>/2023/08/21/%E5%89%8D%E7%AB%AF%E8%AF%AD%E9%9F%B3%E8%BD%AC%E6%96%87%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>最近踩坑了浏览器端的语音转文字,使用场景大概是如下</p><p>对着麦克风说唤醒词 如 “你好小度”<br>然后 说出命令 如 “打开三维分析”<br>然后系统读取文字 转拼音, 进行对应的操作</p><p>大概有如下几种路线</p><h2 id="Web-Speech-API"><a href="#Web-Speech-API" class="headerlink" title="Web Speech API"></a>Web Speech API</h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Speech_API">https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Speech_API</a></p></blockquote><p>浏览器自带的api,chrome可以直接使用, 缺点是需要连外网, 由于项目部署在内网,此方案最终放弃.</p><hr><h2 id="vosk"><a href="#vosk" class="headerlink" title="vosk"></a>vosk</h2><p>后端找到的本地部署的语音模型,可通过docker部署</p><blockquote><p>docker run -d -p 2700:2700 alphacep&#x2F;kaldi-en:latest</p></blockquote><p>前端通过websocket通信,发送AudioBuffer数据, 返回转换后的文本. 这里附上写好的vue组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;sound-con&quot; v-if=&quot;recognizing&quot;&gt;<br>    &lt;div class=&quot;sound-con&quot;&gt;<br>      &lt;img :src=&quot;micUrl&quot; alt=&quot;&quot;&gt;<br>      &lt;div class=&quot;text&quot; v-if=&quot;final_transcript&quot;&gt;&#123;&#123; final_transcript &#125;&#125;&lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;pinyin&#125; from &#x27;pinyin-pro&#x27;;<br><br>export default &#123;<br>  name: &quot;SoundControl&quot;,<br>  data: () =&gt; &#123;<br>    return &#123;<br>      micUrl: &#x27;&#x27;,<br>      recognizing: false,<br>      final_transcript: &#x27;&#x27;,//最终生成的文本<br>      pyStr: &#x27;&#x27;,// 用于识别命令的拼音<br>      wsUrl: &#x27;ws://你的vosk服务地址&#x27;,<br>      webSocket: &#x27;&#x27;,<br>      streamLocal: &#x27;&#x27;, //声音流<br>      context: &quot;&quot;, // 声音处理上下文环境<br>      source: &#x27;&#x27;, //声音处理source<br>      processor: &#x27;&#x27;, //声音处理程序<br>      bufferSize: 8192 // 缓冲区大小<br>    &#125;<br>  &#125;,<br>  mounted: function () &#123;<br>    this.initWS()<br>    navigator.mediaDevices.getUserMedia(&#123;<br>      audio: &#123;<br>        channelCount: 1,<br>        echoCancellation: true,<br>        noiseSuppression: true,<br>        sampleRate: 8000<br>      &#125;, video: false<br>    &#125;).then(this.handleStream)<br>  &#125;,<br>  methods: &#123;<br>    handleStream(stream) &#123;<br>      this.streamLocal = stream<br>      this.context = new AudioContext(&#123;sampleRate: 8000&#125;);<br>      this.source = this.context.createMediaStreamSource(stream);<br>      this.processor = this.context.createScriptProcessor(this.bufferSize, 1, 1);<br><br>      this.source.connect(this.processor);<br>      this.processor.connect(this.context.destination);<br><br>      this.processor.onaudioprocess = (audioDataChunk) =&gt; &#123;<br>        // console.log(&#x27;audioDataChunk.inputBuffer :%o&#x27;, audioDataChunk.inputBuffer);<br>        this.sendAudio(audioDataChunk);<br>      &#125;;<br>    &#125;,<br>    sendAudio(audioDataChunk) &#123;<br>      if (this.webSocket.readyState === WebSocket.OPEN) &#123;<br>        // convert to 16-bit payload<br>        const inputData = audioDataChunk.inputBuffer.getChannelData(0) || new Float32Array(this.bufferSize);<br>        const targetBuffer = new Int16Array(inputData.length);<br>        for (let index = inputData.length; index &gt; 0; index--) &#123;<br>          targetBuffer[index] = 32767 * Math.min(1, inputData[index]);<br>        &#125;<br>        this.webSocket.send(targetBuffer.buffer);<br>      &#125;<br>    &#125;,<br>    initWS() &#123;<br>      this.webSocket = new WebSocket(this.wsUrl);<br>      this.webSocket.binaryType = &quot;arraybuffer&quot;;<br><br>      this.webSocket.onopen = function (event) &#123;<br>        console.log(&#x27;vosk语音转文本连接成功&#x27;);<br>      &#125;;<br><br>      this.webSocket.onerror = function (event) &#123;<br>        console.error(event.data);<br>      &#125;;<br><br>      this.webSocket.onmessage = (event) =&gt; &#123;<br>        if (event.data) &#123;<br>          let parsed = JSON.parse(event.data);<br>          if (parsed.text) &#123;<br>            console.log(&#x27;声音识别结果: %s&#x27;, parsed.text)<br>            // 先用唤醒词识别 请求第一次接口 返回文字转拼音 如果有 xiao du 则手动开启录音<br>            // 模糊音处理 统一使用前鼻音<br>            this.pyStr = pinyin(parsed.text, &#123;toneType: &#x27;none&#x27;&#125;).replaceAll(/ing/g, &#x27;in&#x27;).replaceAll(/eng/g, &#x27;en&#x27;)<br>            if (this.pyStr.includes(&#x27;xiao du&#x27;)) &#123;<br>              this.recognizing = true<br>              this.final_transcript = &#x27;我在! 您可以尝试说: 打开开挖分析&#x27;<br>              setTimeout(() =&gt; &#123;<br>                this.recognizing = false<br>                this.final_transcript = &#x27;&#x27;<br>              &#125;, 100000)<br>            &#125; else &#123;<br>              if (this.recognizing) &#123;<br>                this.final_transcript = parsed.text<br>                this.pyStr = pinyin(parsed.text, &#123;toneType: &#x27;none&#x27;&#125;).replaceAll(/ing/g, &#x27;in&#x27;)<br>                  .replaceAll(/eng/g, &#x27;en&#x27;).trim()<br>                  .replaceAll(/\s+/g,&#x27; &#x27;)<br>                this.$store.commit(&#x27;setSoundControl&#x27;, this.pyStr)<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;;<br>    &#125;<br>  &#125;,<br>  watch: &#123;<br>    recognizing: &#123;<br>      handler(n) &#123;<br>        this.micUrl = n ? require(&#x27;@/assets/img/sound_record/mic-animate.gif&#x27;)<br>          : require(&#x27;@/assets/img/sound_record/mic.gif&#x27;)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.sound-con &#123;<br>  position: fixed;<br>  left: 500px;<br>  bottom: 20px;<br>  cursor: pointer;<br>  background: rgba(60, 115, 102, 0.8);<br>  border-radius: 20px;<br>  height: 50px;<br><br>  display: flex;<br>  align-items: center;<br><br>  .text &#123;<br>    width: auto;<br>    height: 50px;<br>    color: white;<br>    border-radius: 20px;<br>    background: rgba(60, 115, 102, 0.8);<br>    margin-left: 20px;<br>    margin-right: 20px;<br>    line-height: 50px;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>还有一个js, 可以将录音的流转换为blob,进而生成文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Recorder</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">stream, config</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span> = config || &#123;&#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">sampleBits</span> = <span class="hljs-number">16</span>;      <span class="hljs-comment">//采样数位 8, 16</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">sampleRate</span> = <span class="hljs-number">16000</span>;   <span class="hljs-comment">//采样率(1/6 44100)</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AudioContext</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">audioInput</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">createMediaStreamSource</span>(stream);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">recorder</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">createScriptProcessor</span>(<span class="hljs-number">4096</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = <span class="hljs-number">0</span>          <span class="hljs-comment">//录音文件长度</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">buffer</span> = []     <span class="hljs-comment">//录音缓存</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">inputDataList</span> = []<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">inputSampleRate</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">sampleRate</span>    <span class="hljs-comment">//输入采样率</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">inputSampleBits</span> = <span class="hljs-number">16</span>       <span class="hljs-comment">//输入采样数位 8, 16</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">outputSampleRate</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">sampleRate</span>    <span class="hljs-comment">//输出采样率</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">oututSampleBits</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">sampleBits</span>       <span class="hljs-comment">//输出采样数位 8, 16</span><br><br>    <span class="hljs-comment">//音频采集</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">recorder</span>.<span class="hljs-property">onaudioprocess</span> =  <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">input</span>(e.<span class="hljs-property">inputBuffer</span>.<span class="hljs-title function_">getChannelData</span>(<span class="hljs-number">0</span>));<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">inputDataList</span>.<span class="hljs-title function_">push</span>(e)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">input</span>(<span class="hljs-params">data</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">buffer</span>.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(data));<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> += data.<span class="hljs-property">length</span>;<br>  &#125;<br>  compress () &#123; <span class="hljs-comment">//合并压缩</span><br>    <span class="hljs-comment">//合并</span><br>    <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>);<br>    <span class="hljs-keyword">let</span> offset = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">buffer</span>.<span class="hljs-property">length</span>; i++) &#123;<br>      data.<span class="hljs-title function_">set</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">buffer</span>[i], offset);<br>      offset += <span class="hljs-variable language_">this</span>.<span class="hljs-property">buffer</span>[i].<span class="hljs-property">length</span>;<br>    &#125;<br>    <span class="hljs-comment">//压缩</span><br>    <span class="hljs-keyword">let</span> compression = <span class="hljs-built_in">parseInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">inputSampleRate</span> / <span class="hljs-variable language_">this</span>.<span class="hljs-property">outputSampleRate</span>);<br>    <span class="hljs-keyword">let</span> length = data.<span class="hljs-property">length</span> / compression;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(length);<br>    <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (index &lt; length) &#123;<br>      result[index] = data[j];<br>      j += compression;<br>      index++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br><br>  encodeWAV ()&#123;<br>    <span class="hljs-keyword">let</span> sampleRate = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">inputSampleRate</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">outputSampleRate</span>);<br>    <span class="hljs-keyword">let</span> sampleBits = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">inputSampleBits</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">oututSampleBits</span>);<br>    <span class="hljs-keyword">let</span> bytes = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">compress</span>();<br>    <span class="hljs-keyword">let</span> dataLength = bytes.<span class="hljs-property">length</span> * (sampleBits / <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">let</span> buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">44</span> + dataLength);<br>    <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(buffer);<br><br><br>    <span class="hljs-keyword">let</span> channelCount = <span class="hljs-number">1</span>;<span class="hljs-comment">//单声道</span><br>    <span class="hljs-keyword">let</span> offset = <span class="hljs-number">0</span>;<br><br><br>    <span class="hljs-keyword">let</span> writeString = <span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-property">length</span>; i++) &#123;<br>        data.<span class="hljs-title function_">setUint8</span>(offset + i, str.<span class="hljs-title function_">charCodeAt</span>(i));<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 资源交换文件标识符</span><br>    <span class="hljs-title function_">writeString</span>(<span class="hljs-string">&#x27;RIFF&#x27;</span>);<br>    offset += <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 下个地址开始到文件尾总字节数,即文件大小-8</span><br>    data.<span class="hljs-title function_">setUint32</span>(offset, <span class="hljs-number">36</span> + dataLength, <span class="hljs-literal">true</span>);<br>    offset += <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// WAV文件标志</span><br>    <span class="hljs-title function_">writeString</span>(<span class="hljs-string">&#x27;WAVE&#x27;</span>);<br>    offset += <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 波形格式标志</span><br>    <span class="hljs-title function_">writeString</span>(<span class="hljs-string">&#x27;fmt &#x27;</span>);<br>    offset += <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 过滤字节,一般为 0x10 = 16</span><br>    data.<span class="hljs-title function_">setUint32</span>(offset, <span class="hljs-number">16</span>, <span class="hljs-literal">true</span>);<br>    offset += <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 格式类别 (PCM形式采样数据)</span><br>    data.<span class="hljs-title function_">setUint16</span>(offset, <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>);<br>    offset += <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 通道数</span><br>    data.<span class="hljs-title function_">setUint16</span>(offset, channelCount, <span class="hljs-literal">true</span>);<br>    offset += <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 采样率,每秒样本数,表示每个通道的播放速度</span><br>    data.<span class="hljs-title function_">setUint32</span>(offset, sampleRate, <span class="hljs-literal">true</span>);<br>    offset += <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 波形数据传输率 (每秒平均字节数) 单声道×每秒数据位数×每样本数据位/8</span><br>    data.<span class="hljs-title function_">setUint32</span>(offset, channelCount * sampleRate * (sampleBits / <span class="hljs-number">8</span>), <span class="hljs-literal">true</span>);<br>    offset += <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 快数据调整数 采样一次占用字节数 单声道×每样本的数据位数/8</span><br>    data.<span class="hljs-title function_">setUint16</span>(offset, channelCount * (sampleBits / <span class="hljs-number">8</span>), <span class="hljs-literal">true</span>);<br>    offset += <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 每样本数据位数</span><br>    data.<span class="hljs-title function_">setUint16</span>(offset, sampleBits, <span class="hljs-literal">true</span>);<br>    offset += <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 数据标识符</span><br>    <span class="hljs-title function_">writeString</span>(<span class="hljs-string">&#x27;data&#x27;</span>);<br>    offset += <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 采样数据总数,即数据总大小-44</span><br>    data.<span class="hljs-title function_">setUint32</span>(offset, dataLength, <span class="hljs-literal">true</span>);<br>    offset += <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 写入采样数据</span><br>    <span class="hljs-keyword">if</span> (sampleBits === <span class="hljs-number">8</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; bytes.<span class="hljs-property">length</span>; i++, offset++) &#123;<br>        <span class="hljs-keyword">let</span> s = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(-<span class="hljs-number">1</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-number">1</span>, bytes[i]));<br>        <span class="hljs-keyword">let</span> val = s &lt; <span class="hljs-number">0</span> ? s * <span class="hljs-number">0x8000</span> : s * <span class="hljs-number">0x7FFF</span>;<br>        val = <span class="hljs-built_in">parseInt</span>(<span class="hljs-number">255</span> / (<span class="hljs-number">65535</span> / (val + <span class="hljs-number">32768</span>)));<br>        data.<span class="hljs-title function_">setInt8</span>(offset, val, <span class="hljs-literal">true</span>);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; bytes.<span class="hljs-property">length</span>; i++, offset += <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">let</span> s = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(-<span class="hljs-number">1</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-number">1</span>, bytes[i]));<br>        data.<span class="hljs-title function_">setInt16</span>(offset, s &lt; <span class="hljs-number">0</span> ? s * <span class="hljs-number">0x8000</span> : s * <span class="hljs-number">0x7FFF</span>, <span class="hljs-literal">true</span>);<br>      &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([data], &#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;audio/wav&#x27;</span>&#125;);<br>  &#125;<br><br>  <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">audioInput</span>.<span class="hljs-title function_">connect</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">recorder</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">recorder</span>.<span class="hljs-title function_">connect</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">destination</span>);<br>  &#125;<br>  <span class="hljs-title function_">stop</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">recorder</span>.<span class="hljs-title function_">disconnect</span>();<br>  &#125;<br><br>  getBlob () &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">stop</span>();<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">encodeWAV</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = <span class="hljs-number">0</span>          <span class="hljs-comment">//录音文件长度</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">buffer</span> = []<br>    <span class="hljs-keyword">return</span> data<br>  &#125;<br><br>  <span class="hljs-title function_">play</span>(<span class="hljs-params">audio</span>) &#123;<br>    audio.<span class="hljs-property">src</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getBlob</span>());<br>  &#125;<br><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Recorder</span><br><br></code></pre></td></tr></table></figure><h2 id="Whisper-Asr-Webservice"><a href="#Whisper-Asr-Webservice" class="headerlink" title="Whisper Asr Webservice"></a>Whisper Asr Webservice</h2><p>这个是我在github上找的,基于openAi的whisper 实现<br>也可以通过docker部署 详情参见github</p><blockquote><p><a href="https://github.com/ahmetoner/whisper-asr-webservice/">https://github.com/ahmetoner/whisper-asr-webservice/</a><br><a href="https://github.com/openai/whisper/">https://github.com/openai/whisper/</a></p></blockquote><p>部署后, 测试wav文件是可以得到返回结果的</p><img src="/2023/08/21/%E5%89%8D%E7%AB%AF%E8%AF%AD%E9%9F%B3%E8%BD%AC%E6%96%87%E5%AD%97/img.png" class="" title="这是一个测试图片">]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>语音</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xlsx导出宽度自适应</title>
    <link href="/2023/03/17/xlsx%E5%AF%BC%E5%87%BA%E5%AE%BD%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <url>/2023/03/17/xlsx%E5%AF%BC%E5%87%BA%E5%AE%BD%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<p>前端导出element表格</p><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">// 传入表格元素的id和要导出的文件名<br>function exportExcel1(id, fileName) &#123;<br>    const tableDom = document.querySelector(`#$&#123;id&#125;`)<br>    let sheet  = XLSX.utils.table_to_sheet(tableDom, &#123; raw: true &#125;)<br>    let curColKey = &#x27;&#x27;<br>    let widthListObj = &#123;&#125;<br>    Object.keys(sheet).forEach(key=&gt;&#123;<br>        // keys a1 b1 ...aa1<br>        if (/[A-Z].*[0-9]$/.test(key))&#123;<br>            curColKey = /[A-Z]+/.exec(key)[0]<br>            if(!widthListObj[curColKey])&#123;<br>                widthListObj[curColKey] = []<br>            &#125;<br>            // 计算列宽,存储<br>            const width = getCellWidth(sheet[key].v)<br>            widthListObj[curColKey].push(width)<br>        &#125;<br>    &#125;)<br>    Object.keys(widthListObj).forEach(colKey=&gt;&#123;<br>        sheet[&#x27;!cols&#x27;].push(&#123; wch: Math.max(...widthListObj[colKey]) &#125;)<br>    &#125;)<br>    let workBook = &#123;<br>        SheetNames: [fileName],<br>        Sheets: &#123;<br>            [fileName]: sheet<br>        &#125;<br>    &#125;<br>    XLSX.writeFile(workBook, fileName)<br>&#125;<br>// 计算宽度<br>function getCellWidth(value) &#123;<br>  // 判断是否为null或undefined<br>  if (value == null) &#123;<br>    return 10;<br>  &#125; else if (/.*[\u4e00-\u9fa5]+.*$/.test(value)) &#123;<br>    // 中文的长度<br>    const chineseLength = value.match(/[\u4e00-\u9fa5]/g).length;<br>    // 其他不是中文的长度<br>    const otherLength = value.length - chineseLength;<br>    return chineseLength * 2.1 + otherLength * 1.1;<br>  &#125; else &#123;<br>    return value.toString().length * 1.1;<br>    /* 另一种方案<br>    value = value.toString()<br>    return value.replace(/[\u0391-\uFFE5]/g, &#x27;aa&#x27;).length<br>    */<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>xlsx</tag>
      
      <tag>前端</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始搭建个人网站</title>
    <link href="/2023/03/17/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%A1/"/>
    <url>/2023/03/17/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="建站总结"><a href="#建站总结" class="headerlink" title="建站总结"></a>建站总结</h1><h3 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h3><pre><code class="hljs">买的搬瓦工,49.9刀一年</code></pre><h3 id="安装LNMP及域名解析"><a href="#安装LNMP及域名解析" class="headerlink" title="安装LNMP及域名解析"></a>安装LNMP及域名解析</h3><pre><code class="hljs">简单的话直接装个nginx就可以,然后可以把前端打包的静态资源丢上去即可域名解析用的阿里云</code></pre><h3 id="本地搭建hexo"><a href="#本地搭建hexo" class="headerlink" title="本地搭建hexo"></a>本地搭建hexo</h3><h3 id="建立远程仓库及推送配置"><a href="#建立远程仓库及推送配置" class="headerlink" title="建立远程仓库及推送配置"></a>建立远程仓库及推送配置</h3><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>建站</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则速查</title>
    <link href="/2023/01/16/%E6%AD%A3%E5%88%99%E9%80%9F%E6%9F%A5/"/>
    <url>/2023/01/16/%E6%AD%A3%E5%88%99%E9%80%9F%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><pre><code class="hljs">是一种表达式模板,用于匹配文本创建正则实例的两种方法</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">var regex = /xyz/;<br>var regex = new RegExp(&#x27;xyz&#x27;);<br></code></pre></td></tr></table></figure><hr><h2 id="实例方法-test-exec"><a href="#实例方法-test-exec" class="headerlink" title="实例方法 test,exec"></a>实例方法 test,exec</h2><pre><code class="hljs">正则实例对象的test方法返回一个布尔值，表示当前模式是否能匹配参数字符串。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">/cat/.test(&#x27;cats and dogs&#x27;) // true<br></code></pre></td></tr></table></figure><pre><code class="hljs">正则实例对象的exec()方法，用来返回匹配结果。如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回null。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">var s = &#x27;_x_x&#x27;;<br>var r1 = /x/;<br>var r2 = /y/;<br><br>r1.exec(s) // [&quot;x&quot;]<br>r2.exec(s) // null<br></code></pre></td></tr></table></figure><hr><h2 id="字符串实例方法-match-replace-split"><a href="#字符串实例方法-match-replace-split" class="headerlink" title="字符串实例方法 match,replace,split"></a>字符串实例方法 match,replace,split</h2><pre><code class="hljs">字符串的实例方法之中，有4种与正则表达式有关。</code></pre><ul><li>String.prototype.match()：返回一个数组，成员是所有匹配的子字符串。</li><li>String.prototype.search()：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。</li><li>String.prototype.replace()：按照给定的正则表达式进行替换，返回替换后的字符串。</li><li>String.prototype.split()：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。</li></ul><hr><h2 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h2><h3 id="元字符-点字符-位置字符-选择字符"><a href="#元字符-点字符-位置字符-选择字符" class="headerlink" title="元字符(点字符,位置字符,选择字符)"></a>元字符(点字符,位置字符,选择字符)</h3><h4 id="点字符"><a href="#点字符" class="headerlink" title="点字符"></a>点字符</h4><pre><code class="hljs"> 点字符（.）匹配除回车（\r）、换行(\n) 、行分隔符（\u2028）和段分隔符（\u2029）以外的所有字符。 注意，对于码点大于0xFFFF字符，点字符不能正确匹配，会认为这是两个字符。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">/c.t/<br>// 可以匹配 c 和 t 中间任意单个字符的情况  如 cat c-t, 但不匹配coot<br></code></pre></td></tr></table></figure><h4 id="位置字符"><a href="#位置字符" class="headerlink" title="位置字符"></a>位置字符</h4><pre><code class="hljs">位置字符用来提示字符所处的位置，主要有两个字符。^表示必须出现在开头$表示必须出现在结尾</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">/^test/.test(&#x27;test123&#x27;); // true<br><br>// 从开始位置到结束位置只有test<br>/^test$/.test(&#x27;test&#x27;); // true<br>/^test$/.test(&#x27;test test&#x27;); // false<br></code></pre></td></tr></table></figure><h4 id="选择符"><a href="#选择符" class="headerlink" title="选择符"></a>选择符</h4><pre><code class="hljs">表示或关系,即cat|dog表示匹配cat或dog。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">/11|22/.test(&#x27;911&#x27;) // true<br></code></pre></td></tr></table></figure><hr><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类( [ ] )"></a>字符类( [ ] )</h3><pre><code class="hljs">字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内，比如[xyz] 表示x、y、z之中任选一个匹配。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">/[abc]/.test(&#x27;hello world&#x27;); // false<br>/[abc]/.test(&#x27;apple&#x27;); // true<br></code></pre></td></tr></table></figure><h4 id="脱字符"><a href="#脱字符" class="headerlink" title="脱字符"></a>脱字符</h4><pre><code class="hljs">如果方括号内的第一个字符是[^]，则表示除了字符类之中的字符，其他字符都可以匹配。比如，[^xyz]表示除了x、y、z之外都可以匹配。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">/[^abc]/.test(&#x27;bbc news&#x27;); // true<br>/[^abc]/.test(&#x27;bbc&#x27;); // false<br></code></pre></td></tr></table></figure><h4 id="连字符"><a href="#连字符" class="headerlink" title="连字符"></a>连字符</h4><pre><code class="hljs">某些情况下，对于连续序列的字符，连字符（-）用来提供简写形式，表示字符的连续范围。比如，[abc]可以写成[a-c]，[0123456789]可以写成[0-9]，同理[A-Z]表示26个大写字母。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">/a-z/.test(&#x27;b&#x27;); // false  没有写在中括号中<br>/[a-z]/.test(&#x27;b&#x27;); // true<br></code></pre></td></tr></table></figure><hr><h3 id="预定义模式"><a href="#预定义模式" class="headerlink" title="预定义模式"></a>预定义模式</h3><ul><li>\d 匹配0-9之间的任一数字，相当于[0-9]。</li><li>\D 匹配所有0-9以外的字符，相当于[^0-9]。</li><li>\w 匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]。</li><li>\W 除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]。</li><li>\s 匹配空格（包括换行符、制表符、空格符等），相等于[ \t\r\n\v\f]。</li><li>\S 匹配非空格的字符，相当于[^ \t\r\n\v\f]。</li><li>\b 匹配词的边界。</li><li>\B 匹配非词边界，即在词的内部。</li></ul><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">var html = &quot;&lt;b&gt;Hello&lt;/b&gt;\n&lt;i&gt;world!&lt;/i&gt;&quot;;<br><br>/[\S\s]*/.exec(html)[0]<br>// &quot;&lt;b&gt;Hello&lt;/b&gt;\n&lt;i&gt;world!&lt;/i&gt;&quot;<br>//上面代码中，[\S\s]指代一切字符。<br></code></pre></td></tr></table></figure><hr><h3 id="重复类"><a href="#重复类" class="headerlink" title="重复类"></a>重复类</h3><pre><code class="hljs">模式的精确匹配次数，使用大括号（&#123;&#125;）表示。&#123;n&#125;表示恰好重复n次，&#123;n,&#125;表示至少重复n次，&#123;n,m&#125;表示重复不少于n次，不多于m次。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">/lo&#123;2&#125;k/.test(&#x27;look&#x27;); // true<br>/lo&#123;2,5&#125;k/.test(&#x27;looook&#x27;) // true<br></code></pre></td></tr></table></figure><h3 id="量词符"><a href="#量词符" class="headerlink" title="量词符"></a>量词符</h3><pre><code class="hljs">量词符用来设定某个模式出现的次数。</code></pre><ul><li><p>? 问号表示某个模式出现0次或1次，等同于{0, 1}。</p></li><li><p>* 星号表示某个模式出现0次或多次，等同于{0,}。</p></li><li><p>+ 加号表示某个模式出现1次或多次，等同于{1,}。</p><p>这三个量词符默认是贪婪模式,即匹配到下一个字符不满足为止</p></li></ul><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">var s = &#x27;aaa&#x27;;<br>s.match(/a+/) // [&quot;aaa&quot;]<br></code></pre></td></tr></table></figure><pre><code class="hljs">在量词符后加上 ? 可以改为非贪婪模式</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">var s = &#x27;aaa&#x27;;<br>s.match(/a+?/) // [&quot;a&quot;]<br></code></pre></td></tr></table></figure><h3 id="修饰符-i-g-m-s-u"><a href="#修饰符-i-g-m-s-u" class="headerlink" title="修饰符 (i,g,m,s,u)"></a>修饰符 (i,g,m,s,u)</h3><pre><code class="hljs">i,g,m,可同时使用</code></pre><h4 id="g修饰符"><a href="#g修饰符" class="headerlink" title="g修饰符"></a>g修饰符</h4><pre><code class="hljs">一般第一次匹配成功后,正则对象就停止向下匹配了。g修饰符表示全局匹配（global），加上它以后，正则对象将匹配全部符合条件的结果，主要用于搜索和替换。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">&#x27;a bird lying in the bed&#x27;.match(/b\w*/);<br>// 返回 [&#x27;bird&#x27;, index: 2, input: &#x27;a bird lying in the bed&#x27;, groups: undefined]<br>&#x27;a bird lying in the bed&#x27;.match(/b\w*/g)<br>// [&#x27;bird&#x27;, &#x27;bed&#x27;]<br></code></pre></td></tr></table></figure><pre><code class="hljs">此处的\w代表匹配任意的字母、数字和下划线, *代表这个\w出现0次或多次</code></pre><h4 id="i修饰符"><a href="#i修饰符" class="headerlink" title="i修饰符"></a>i修饰符</h4><pre><code class="hljs">默认情况下，正则对象区分字母的大小写，加上i修饰符以后表示忽略大小写</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">/abc/.test(&#x27;ABC&#x27;); // false<br>/abc/i.test(&#x27;ABC&#x27;) // true<br></code></pre></td></tr></table></figure><h4 id="m修饰符"><a href="#m修饰符" class="headerlink" title="m修饰符"></a>m修饰符</h4><pre><code class="hljs">m修饰符表示多行模式（multiline），会修改^和$的行为。默认情况下（即不加m修饰符时），^和$匹配字符串的开始处和结尾处，加上m修饰符以后，^和$还会匹配行首和行尾，即^和$会识别换行符（\n）。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">/world$/.test(&#x27;hello world\n&#x27;);// false<br>/world$/m.test(&#x27;hello world\n&#x27;) // true<br></code></pre></td></tr></table></figure><pre><code class="hljs">上面的代码中，字符串结尾处有一个换行符。如果不加m修饰符，匹配不成功，因为字符串的结尾不是world；加上以后，$可以匹配行尾。</code></pre><h4 id="s修饰符"><a href="#s修饰符" class="headerlink" title="s修饰符"></a>s修饰符</h4><pre><code class="hljs">正则表达式中，点（.）是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用u修饰符解决；另一个是行终止符（line terminator character）。主要就是 换行\n以及回车\r,但有时候我们就是想能够匹配任意字符,es5中有一种变通的方法,使用 [^] 代替. ,在ES2018中引入了s修饰符,它使得.可以匹配任意单个字符</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">/foo.bar/.test(&#x27;foo\nbar&#x27;);<br>// false<br>/foo[^]bar/.test(&#x27;foo\nbar&#x27;);<br>// true<br>/foo.bar/s.test(&#x27;foo\nbar&#x27;); // true<br></code></pre></td></tr></table></figure><hr><h3 id="组匹配"><a href="#组匹配" class="headerlink" title="组匹配"></a>组匹配</h3><pre><code class="hljs">正则表达式的括号表示分组匹配，括号中的模式可以用来匹配分组的内容。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">/fred+/.test(&#x27;fredd&#x27;); // true<br>/(fred)+/.test(&#x27;fredfred&#x27;) // true<br></code></pre></td></tr></table></figure><pre><code class="hljs">上面代码中，第一个模式没有括号，结果+只表示重复字母d，第二个模式有括号，结果+就表示匹配fred这个词。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">var m = &#x27;abcabc&#x27;.match(/(.)b(.)/);<br>m<br>// [&#x27;abc&#x27;, &#x27;a&#x27;, &#x27;c&#x27;]<br></code></pre></td></tr></table></figure><pre><code class="hljs">可以看到 组匹配的内容 a, c 也被输出了出来正则表达式内部，还可以用\n引用括号匹配的内容，n是从1开始的自然数，表示对应顺序的括号。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">/y(..)(.)\2\1/.test(&#x27;yabccab&#x27;) // true<br></code></pre></td></tr></table></figure><pre><code class="hljs">组匹配非常有用，下面是一个匹配网页标签的例子。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">var tagName = /&lt;([^&gt;]+)&gt;[^&lt;]*&lt;\/\1&gt;/;<br><br>tagName.exec(&quot;&lt;b&gt;bold&lt;/b&gt;&quot;)[1]<br>// &#x27;b&#x27;<br></code></pre></td></tr></table></figure><pre><code class="hljs">匹配时间的例子</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">const RE_DATE = /(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/;<br><br>const matchObj = RE_DATE.exec(&#x27;1999-12-31&#x27;);<br>const year = matchObj[1]; // 1999<br>const month = matchObj[2]; // 12<br>const day = matchObj[3]; // 31<br></code></pre></td></tr></table></figure><pre><code class="hljs">组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号（比如matchObj[1]）引用，要是组的顺序变了，引用的时候就必须修改序号。ES2018 引入了具名组匹配（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">const RE_DATE = /(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/;<br><br>const matchObj = RE_DATE.exec(&#x27;1999-12-31&#x27;);<br>const year = matchObj.groups.year; // &quot;1999&quot;<br>const month = matchObj.groups.month; // &quot;12&quot;<br>const day = matchObj.groups.day; // &quot;31&quot;<br></code></pre></td></tr></table></figure><pre><code class="hljs">上面代码中，“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”（?&lt;year&gt;），然后就可以在exec方法返回结果的groups属性上引用该组名。同时，数字序号（matchObj[1]）依然有效。引用具名组</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">let re = /(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/u;<br><br>&#x27;2015-01-02&#x27;.replace(re, &#x27;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&#x27;)<br>// &#x27;02/01/2015&#x27;<br></code></pre></td></tr></table></figure><pre><code class="hljs">正则内部引用具名匹配组,使用 \k&lt;组名&gt;的写法</code></pre><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ecmascript">const RE_TWICE = /^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;$/;<br>RE_TWICE.test(&#x27;abc!abc&#x27;) // true<br>RE_TWICE.test(&#x27;abc!ab&#x27;) // false<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>正则</tag>
      
      <tag>es6</tag>
      
      <tag>es5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原生cesium实现地形开挖效果</title>
    <link href="/2023/01/13/%E5%8E%9F%E7%94%9Fcesium%E5%AE%9E%E7%8E%B0%E5%9C%B0%E5%BD%A2%E5%BC%80%E6%8C%96%E6%95%88%E6%9E%9C/"/>
    <url>/2023/01/13/%E5%8E%9F%E7%94%9Fcesium%E5%AE%9E%E7%8E%B0%E5%9C%B0%E5%BD%A2%E5%BC%80%E6%8C%96%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<p>参考</p><blockquote><p><a href="https://blog.csdn.net/u013869554/article/details/120535940">https://blog.csdn.net/u013869554/article/details/120535940</a></p></blockquote><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="/2023/01/13/%E5%8E%9F%E7%94%9Fcesium%E5%AE%9E%E7%8E%B0%E5%9C%B0%E5%BD%A2%E5%BC%80%E6%8C%96%E6%95%88%E6%9E%9C/img.png" class="" title="这是一个测试图片"><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>对于凹多边形,地形裁切会有bug</li><li>无法同时裁切多个洞</li><li>边界放大看会有细小的偏差</li></ol><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>在cesium的github中发现有人实现了多个挖洞的效果,可以参考</p><blockquote><p><a href="https://github.com/CesiumGS/cesium/issues/8751">https://github.com/CesiumGS/cesium/issues/8751</a></p></blockquote><img src="/2023/01/13/%E5%8E%9F%E7%94%9Fcesium%E5%AE%9E%E7%8E%B0%E5%9C%B0%E5%BD%A2%E5%BC%80%E6%8C%96%E6%95%88%E6%9E%9C/multiDig.gif" class="" width="1212"><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ol><li>通过绘制得到封闭的多边形</li><li>通过多边形的坐标计算裁切平面并裁切地形</li><li>地形采样,获取最低点的高度,生成开挖底面并贴材质</li><li>通过地形采样,生成侧面墙体并贴材质</li></ol><h2 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h2><img src="/2023/01/13/%E5%8E%9F%E7%94%9Fcesium%E5%AE%9E%E7%8E%B0%E5%9C%B0%E5%BD%A2%E5%BC%80%E6%8C%96%E6%95%88%E6%9E%9C/bottom.jpg" class="" width="1212"><img src="/2023/01/13/%E5%8E%9F%E7%94%9Fcesium%E5%AE%9E%E7%8E%B0%E5%9C%B0%E5%BD%A2%E5%BC%80%E6%8C%96%E6%95%88%E6%9E%9C/wall.jpg" class="" width="1212"><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">TerrainClipPlan</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/widgets/TerrainClipPlan&quot;</span>;<br><br><span class="hljs-keyword">const</span> terrainClipPlanInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerrainClipPlan</span>(viewer, &#123;<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">splitNum</span>: <span class="hljs-number">1000</span>,<br>  <span class="hljs-attr">bottomImg</span>: <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@/assets/img/dig_terrian_img/bottom.jpg&#x27;</span>),<br>  <span class="hljs-attr">wallImg</span>: <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@/assets/img/dig_terrian_img/wall.jpg&#x27;</span>)<br>&#125;)<br>terrainClipPlanInstance.<span class="hljs-title function_">updateTerrainClipData</span>(pointList)<br></code></pre></td></tr></table></figure><p>类文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> turf <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@turf/turf&#x27;</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> booleanClockwise <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@turf/boolean-clockwise&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">TerrainClipPlan</span>(<span class="hljs-params">t ,i</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span> = t,<span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = i || &#123;&#125;,<span class="hljs-variable language_">this</span>.<span class="hljs-property">_positions</span> = i.<span class="hljs-property">positions</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">_height</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">height</span> || <span class="hljs-number">0</span>,<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottomImg</span> = i.<span class="hljs-property">bottomImg</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">wallImg</span> = i.<span class="hljs-property">wallImg</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">splitNum</span> = <span class="hljs-title class_">Cesium</span>.<span class="hljs-title function_">defaultValue</span>(i.<span class="hljs-property">splitNum</span>, <span class="hljs-number">50</span>),<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_positions</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">_positions</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">updateTerrainClipData</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_positions</span>)<br>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(<span class="hljs-title class_">TerrainClipPlan</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, &#123;<br>    <span class="hljs-attr">show</span>: &#123;<br>        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_show</span><br>        &#125;,<br>        <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_show</span> = e, <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-property">clippingPlanes</span> &amp;&amp; (<span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-property">clippingPlanes</span>.<span class="hljs-property">enabled</span> = e), <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_switchExcavate</span>(e)<br>        &#125;<br>    &#125;,<br><br>    <span class="hljs-attr">height</span>: &#123;<br>        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_height</span><br>        &#125;,<br>        <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_height</span> = e<br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pointList  cartesian3 数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">TerrainClipPlan</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">updateTerrainClipData</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">pointList</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">clear</span>();<br>    <span class="hljs-comment">// 对点做处理,如果不是逆时针 变为逆时针</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">ifAntiClockwise</span>(pointList))&#123;<br>        pointList.<span class="hljs-title function_">reverse</span>()<br>    &#125;<br>    <span class="hljs-keyword">var</span> t = [],<br>        pointLength = pointList.<span class="hljs-property">length</span>,<br>        a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>,<br>        n = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">subtract</span>(pointList[<span class="hljs-number">0</span>], pointList[<span class="hljs-number">1</span>], a);<br>        n = n.<span class="hljs-property">x</span> &gt; <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">excavateMinHeight</span> = <span class="hljs-number">9999</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; pointLength; ++i) &#123;<br>        <span class="hljs-keyword">var</span> nextPointIndex = (i + <span class="hljs-number">1</span>) % pointLength,<br>        u = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartographic</span>.<span class="hljs-title function_">fromCartesian</span>(pointList[i]),<br>        c = <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-title function_">getHeight</span>(u) || u.<span class="hljs-property">height</span>;<br>        c &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">excavateMinHeight</span> &amp;&amp; (<span class="hljs-variable language_">this</span>.<span class="hljs-property">excavateMinHeight</span> = c);<br><br>        <span class="hljs-keyword">var</span> midpoint = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">add</span>(pointList[i], pointList[nextPointIndex], <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>());<br>        midpoint = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">multiplyByScalar</span>(midpoint, <span class="hljs-number">0.5</span>, midpoint);<br><br>        <span class="hljs-keyword">var</span> up = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">normalize</span>(midpoint, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>());<br><br>        <span class="hljs-keyword">var</span> right = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">subtract</span>(pointList[nextPointIndex], midpoint, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>());<br>        <span class="hljs-keyword">if</span>(right.<span class="hljs-property">x</span>===<span class="hljs-number">0</span> &amp;&amp; right.<span class="hljs-property">y</span>===<span class="hljs-number">0</span> &amp;&amp; right.<span class="hljs-property">z</span>===<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        right = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">normalize</span>(right, right);<br><br>        <span class="hljs-keyword">var</span> normal = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">cross</span>(right, up, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>());<br>        normal = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">normalize</span>(normal, normal);<br><br>        <span class="hljs-keyword">var</span> originCenteredPlane = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Plane</span>(normal, <span class="hljs-number">0.0</span>);<br>        <span class="hljs-keyword">var</span> distance = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Plane</span>.<span class="hljs-title function_">getPointDistance</span>(originCenteredPlane, midpoint);<br><br>        t.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ClippingPlane</span>(normal, distance));<br>    &#125;<br>    <span class="hljs-keyword">const</span> clippingPlaneCollection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ClippingPlaneCollection</span>(&#123;<br>        <span class="hljs-attr">planes</span>: t,<br>        <span class="hljs-attr">edgeWidth</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">edgeColor</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">WHITE</span>,<br>        <span class="hljs-attr">enabled</span>: <span class="hljs-literal">true</span><br>    &#125;)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-property">clippingPlanes</span> = clippingPlaneCollection<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">sjswTileset</span>)&#123;<br>            <span class="hljs-keyword">const</span> clipTileset = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ClippingPlaneCollection</span>(&#123;<br>                <span class="hljs-attr">planes</span>: t,<br>                <span class="hljs-attr">edgeWidth</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">edgeColor</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">WHITE</span>,<br>                <span class="hljs-attr">modelMatrix</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">inverse</span>(<br>                  <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Transforms</span>.<span class="hljs-title function_">eastNorthUpToFixedFrame</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">sjswTileset</span>.<span class="hljs-property">boundingSphere</span>.<span class="hljs-property">center</span>),<br>                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Matrix4</span>()<br>                )<br>            &#125;)<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">sjswTileset</span>.<span class="hljs-property">clippingPlanes</span> = clipTileset<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (e) &#123;<br><br>    &#125;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_prepareWell</span>(pointList)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_createWell</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">wellData</span>)<br>&#125;<br><br><span class="hljs-title class_">TerrainClipPlan</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">clear</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-property">clippingPlanes</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-property">clippingPlanes</span>.<span class="hljs-property">enabled</span> = <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-property">clippingPlanes</span>.<span class="hljs-title function_">isDestroyed</span>())&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-property">clippingPlanes</span>.<span class="hljs-title function_">removeAll</span>()<br>            <span class="hljs-comment">// this.viewer.scene.globe.clippingPlanes.destroy()</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>?.<span class="hljs-property">sjswTileset</span>?.<span class="hljs-property">clippingPlanes</span>?.<span class="hljs-property">removeAll</span>)&#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">sjswTileset</span>.<span class="hljs-property">clippingPlanes</span>.<span class="hljs-title function_">removeAll</span>()<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bottomSurface</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">primitives</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bottomSurface</span>)<br>        <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottomSurface</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">wellWall</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">primitives</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">wellWall</span>)<br>        <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">wellWall</span><br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-title function_">render</span>()<br>&#125;<br><br><span class="hljs-title class_">TerrainClipPlan</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_prepareWell</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">var</span> t = <span class="hljs-variable language_">this</span>.<span class="hljs-property">splitNum</span>,<br>        i = e.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = <span class="hljs-variable language_">this</span>.<span class="hljs-property">excavateMinHeight</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span>, n = [], r = [], s = [], l = <span class="hljs-number">0</span>; l &lt; i; l++) &#123;<br>            <span class="hljs-keyword">var</span> u = l == i - <span class="hljs-number">1</span> ? <span class="hljs-number">0</span> : l + <span class="hljs-number">1</span>,<br>                c = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartographic</span>.<span class="hljs-title function_">fromCartesian</span>(e[l]),<br>                d = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartographic</span>.<span class="hljs-title function_">fromCartesian</span>(e[u]),<br>                h = [c.<span class="hljs-property">longitude</span>, c.<span class="hljs-property">latitude</span>],<br>                f = [d.<span class="hljs-property">longitude</span>, d.<span class="hljs-property">latitude</span>];<br><br>            <span class="hljs-number">0</span> == l &amp;&amp; (<br>                s.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartographic</span>(h[<span class="hljs-number">0</span>], h[<span class="hljs-number">1</span>])),<br>                    r.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromRadians</span>(h[<span class="hljs-number">0</span>], h[<span class="hljs-number">1</span>], a)),<br>                    n.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromRadians</span>(h[<span class="hljs-number">0</span>], h[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>)));<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> p = <span class="hljs-number">1</span>; p &lt;= t; p++) &#123;<br>                <span class="hljs-keyword">var</span> m = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">lerp</span>(h[<span class="hljs-number">0</span>], f[<span class="hljs-number">0</span>], p / t),<br>                    g = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">lerp</span>(h[<span class="hljs-number">1</span>], f[<span class="hljs-number">1</span>], p / t);<br>                l == i - <span class="hljs-number">1</span> &amp;&amp; p == t || (<br>                    s.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartographic</span>(m, g)),<br>                        r.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromRadians</span>(m, g, a)),<br>                        n.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromRadians</span>(m, g, <span class="hljs-number">0</span>)))<br>            &#125;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">wellData</span> = &#123;<br>            <span class="hljs-attr">lerp_pos</span>: s,<br>            <span class="hljs-attr">bottom_pos</span>: r,<br>            <span class="hljs-attr">no_height_top</span>: n<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">TerrainClipPlan</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_createWell</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Boolean</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">terrainProvider</span>.<span class="hljs-property">_layers</span>)) &#123;<br>        <span class="hljs-keyword">var</span> t = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_createBottomSurface</span>(e.<span class="hljs-property">bottom_pos</span>);<br>        <span class="hljs-keyword">var</span> i = <span class="hljs-title class_">Cesium</span>.<span class="hljs-title function_">sampleTerrainMostDetailed</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">terrainProvider</span>, e.<span class="hljs-property">lerp_pos</span>);<br>        i.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">ies</span>=&gt;</span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = ies.<span class="hljs-property">length</span>, n = [], r = <span class="hljs-number">0</span>; r &lt; a; r++) &#123;<br>                <span class="hljs-keyword">var</span> s = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromRadians</span>(ies[r].<span class="hljs-property">longitude</span>, ies[r].<span class="hljs-property">latitude</span>, ies[r].<span class="hljs-property">height</span>);<br>                n.<span class="hljs-title function_">push</span>(s)<br>            &#125;<br>            t.<span class="hljs-title function_">_createWellWall</span>(e.<span class="hljs-property">bottom_pos</span>, n)<br>        &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_createBottomSurface</span>(e.<span class="hljs-property">bottom_pos</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_createWellWall</span>(e.<span class="hljs-property">bottom_pos</span>, e.<span class="hljs-property">no_height_top</span>)<br>    &#125;<br>&#125;<br><br><br><span class="hljs-title class_">TerrainClipPlan</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_getMinHeight</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">let</span> minHeight = <span class="hljs-number">50000000</span>;<br>    <span class="hljs-keyword">let</span> minPoint = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; e.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> height = e[i][<span class="hljs-string">&#x27;z&#x27;</span>];<br>        <span class="hljs-keyword">if</span> (height &lt; minHeight) &#123;<br>            minHeight = height;<br>            minPoint = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_ellipsoidToLonLat</span>(e[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> minPoint.<span class="hljs-property">altitude</span>;<br>&#125;<br><br><br><span class="hljs-title class_">TerrainClipPlan</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_ellipsoidToLonLat</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">c</span>) &#123;<br>    <span class="hljs-keyword">let</span> ellipsoid = <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-property">ellipsoid</span>;<br>    <span class="hljs-keyword">let</span> cartesian3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(c.<span class="hljs-property">x</span>, c.<span class="hljs-property">y</span>, c.<span class="hljs-property">z</span>);<br>    <span class="hljs-keyword">let</span> cartographic = ellipsoid.<span class="hljs-title function_">cartesianToCartographic</span>(cartesian3);<br>    <span class="hljs-keyword">let</span> lat = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toDegrees</span>(cartographic.<span class="hljs-property">latitude</span>);<br>    <span class="hljs-keyword">let</span> lng = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toDegrees</span>(cartographic.<span class="hljs-property">longitude</span>);<br>    <span class="hljs-keyword">let</span> alt = cartographic.<span class="hljs-property">height</span>;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">longitude</span>: lng,<br>        <span class="hljs-attr">latitude</span>: lat,<br>        <span class="hljs-attr">altitude</span>: alt<br>    &#125;<br>&#125;<br><span class="hljs-title class_">TerrainClipPlan</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_createBottomSurface</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">if</span> (e.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">let</span> minHeight = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_getMinHeight</span>(e);<br>        <span class="hljs-keyword">let</span> positions = [];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; e.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">let</span> p = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_ellipsoidToLonLat</span>(e[i]);<br>            positions.<span class="hljs-title function_">push</span>(p.<span class="hljs-property">longitude</span>);<br>            positions.<span class="hljs-title function_">push</span>(p.<span class="hljs-property">latitude</span>);<br>            positions.<span class="hljs-title function_">push</span>(minHeight);<br>        &#125;<br><br>        <span class="hljs-keyword">let</span> polygon = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">PolygonGeometry</span>(&#123;<br>            <span class="hljs-attr">polygonHierarchy</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">PolygonHierarchy</span>(<br>                <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegreesArrayHeights</span>(positions)<br>            ),<br>            <span class="hljs-attr">perPositionHeight</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">closeBottom</span>: <span class="hljs-literal">false</span><br>        &#125;);<br>        <span class="hljs-keyword">let</span> geometry = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">PolygonGeometry</span>.<span class="hljs-title function_">createGeometry</span>(polygon);<br><br><br>        <span class="hljs-keyword">var</span> i = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Material</span>(&#123;<br>                <span class="hljs-attr">fabric</span>: &#123;<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;Image&quot;</span>,<br>                    <span class="hljs-attr">uniforms</span>: &#123;<br>                        <span class="hljs-attr">image</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottomImg</span><br>                    &#125;<br>                &#125;<br>            &#125;),<br>            a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">MaterialAppearance</span>(&#123;<br>                <span class="hljs-attr">translucent</span>: !<span class="hljs-number">1</span>,<br>                <span class="hljs-attr">flat</span>: !<span class="hljs-number">0</span>,<br>                <span class="hljs-attr">material</span>: i<br>            &#125;);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottomSurface</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Primitive</span>(&#123;<br>            <span class="hljs-attr">geometryInstances</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">GeometryInstance</span>(&#123;<br>                <span class="hljs-attr">geometry</span>: geometry<br>            &#125;),<br>            <span class="hljs-attr">appearance</span>: a,<br>            <span class="hljs-attr">asynchronous</span>: !<span class="hljs-number">1</span><br>        &#125;), <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">primitives</span>.<span class="hljs-title function_">add</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bottomSurface</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">TerrainClipPlan</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_createWellWall</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e, t</span>) &#123;<br>    <span class="hljs-keyword">let</span> minHeight = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_getMinHeight</span>(e);<br>    <span class="hljs-keyword">let</span> maxHeights = [];<br>    <span class="hljs-keyword">let</span> minHeights = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; t.<span class="hljs-property">length</span>; i++) &#123;<br>        maxHeights.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_ellipsoidToLonLat</span>(t[i]).<span class="hljs-property">altitude</span>);<br>        minHeights.<span class="hljs-title function_">push</span>(minHeight);<br>    &#125;<br>    <span class="hljs-keyword">let</span> wall = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">WallGeometry</span>(&#123;<br>        <span class="hljs-attr">positions</span>: t,<br>        <span class="hljs-attr">maximumHeights</span>: maxHeights,<br>        <span class="hljs-attr">minimumHeights</span>: minHeights,<br>    &#125;);<br>    <span class="hljs-keyword">let</span> geometry = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">WallGeometry</span>.<span class="hljs-title function_">createGeometry</span>(wall);<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Material</span>(&#123;<br>            <span class="hljs-attr">fabric</span>: &#123;<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;Image&quot;</span>,<br>                <span class="hljs-attr">uniforms</span>: &#123;<br>                    <span class="hljs-attr">image</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">wallImg</span><br>                &#125;<br>            &#125;<br>        &#125;),<br>        n = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">MaterialAppearance</span>(&#123;<br>            <span class="hljs-attr">translucent</span>: !<span class="hljs-number">1</span>,<br>            <span class="hljs-attr">flat</span>: !<span class="hljs-number">0</span>,<br>            <span class="hljs-attr">material</span>: a<br>        &#125;);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">wellWall</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Primitive</span>(&#123;<br>        <span class="hljs-attr">geometryInstances</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">GeometryInstance</span>(&#123;<br>            <span class="hljs-attr">geometry</span>: geometry,<br>            <span class="hljs-attr">attributes</span>: &#123;<br>                <span class="hljs-attr">color</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">ColorGeometryInstanceAttribute</span>.<span class="hljs-title function_">fromColor</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">GREY</span>)<br>            &#125;,<br>            <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;PitWall&quot;</span><br>        &#125;),<br>        <span class="hljs-attr">appearance</span>: n,<br>        <span class="hljs-attr">asynchronous</span>: !<span class="hljs-number">1</span><br>    &#125;), <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">primitives</span>.<span class="hljs-title function_">add</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">wellWall</span>)<br>&#125;<br><span class="hljs-title class_">TerrainClipPlan</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_switchExcavate</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    e ? (<span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-property">material</span> = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Material</span>.<span class="hljs-title function_">fromType</span>(<span class="hljs-string">&quot;WaJue&quot;</span>), <span class="hljs-variable language_">this</span>.<span class="hljs-property">wellWall</span>.<span class="hljs-property">show</span> = !<span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottomSurface</span>.<span class="hljs-property">show</span> = !<span class="hljs-number">0</span>) : (<span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-property">material</span> = <span class="hljs-literal">null</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">wellWall</span>.<span class="hljs-property">show</span> = !<span class="hljs-number">1</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottomSurface</span>.<span class="hljs-property">show</span> = !<span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-title class_">TerrainClipPlan</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_updateExcavateDepth</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">bottomSurface</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">primitives</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bottomSurface</span>), <span class="hljs-variable language_">this</span>.<span class="hljs-property">wellWall</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">primitives</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">wellWall</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t = <span class="hljs-variable language_">this</span>.<span class="hljs-property">wellData</span>.<span class="hljs-property">lerp_pos</span>, i = [], a = t.<span class="hljs-property">length</span>, n = <span class="hljs-number">0</span>; n &lt; a; n++) i.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromRadians</span>(t[n].<span class="hljs-property">longitude</span>, t[n].<span class="hljs-property">latitude</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">excavateMinHeight</span> - e));<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">wellData</span>.<span class="hljs-property">bottom_pos</span> = i, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_createWell</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">wellData</span>), <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">primitives</span>.<span class="hljs-title function_">add</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bottomSurface</span>), <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">primitives</span>.<span class="hljs-title function_">add</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">wellWall</span>)<br>&#125;<br><br><span class="hljs-comment">// 判断坐标串是否为逆时针</span><br><span class="hljs-title class_">TerrainClipPlan</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">ifAntiClockwise</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-comment">//找凸点</span><br>    <span class="hljs-keyword">let</span> pointList = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(e))<br>    pointList.<span class="hljs-title function_">push</span>(pointList[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">let</span> pointListGeo = turf.<span class="hljs-title function_">lineString</span>(pointList.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">point,index</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getLatLngFromXZY</span>(point)<br>    &#125;))<br>    <span class="hljs-keyword">let</span> dirRes = booleanClockwise.<span class="hljs-title function_">default</span>(pointListGeo)<br>    <span class="hljs-keyword">return</span> dirRes<br>&#125;<br><br><span class="hljs-comment">// 世界坐标转经纬度</span><br><span class="hljs-title class_">TerrainClipPlan</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getLatLngFromXZY</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">var</span> ellipsoid = <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-property">ellipsoid</span>;<br>    <span class="hljs-keyword">var</span> cartesian3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(e.<span class="hljs-property">x</span>,e.<span class="hljs-property">y</span>,e.<span class="hljs-property">z</span>);<br>    <span class="hljs-keyword">var</span> cartographic = ellipsoid.<span class="hljs-title function_">cartesianToCartographic</span>(cartesian3);<br>    <span class="hljs-keyword">var</span> latitude = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toDegrees</span>(cartographic.<span class="hljs-property">latitude</span>);<br>    <span class="hljs-keyword">var</span> longitude = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toDegrees</span>(cartographic.<span class="hljs-property">longitude</span>);<br>    <span class="hljs-keyword">var</span> height = cartographic.<span class="hljs-property">height</span>;<br>    <span class="hljs-keyword">return</span> [longitude,latitude]<br>&#125;<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">TerrainClipPlan</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>cesium</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
